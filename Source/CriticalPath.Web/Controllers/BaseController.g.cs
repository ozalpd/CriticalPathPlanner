using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Net;
using System.Web.Mvc;
using System.Data;
using System.Data.Entity;
using System.Threading.Tasks;
using CriticalPath.Data;
using CriticalPath.Web.Models;
using CriticalPath.Data.Resources;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by OzzCodeGen.
//
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CriticalPath.Web.Controllers
{
    public abstract partial class BaseController : OzzIdentity.Controllers.AbstractController 
    {
        public partial class QueryParameters
        {
            public string SearchString { get; set; }
            public int Page { get; set; } = 1;
            public int PageSize { get; set; } = 10;
            public int PageCount
            {
                get
                {
                    return TotalCount > 0 ? (int)Math.Ceiling(TotalCount / (double)PageSize) : 0;
                }
            }

            public int Skip
            {
                get { return (Page - 1) * PageSize; }
            }

            public int TotalCount
            {
                get { return _totalCount; }
                set
                {
                    _totalCount = value;
                    if (Page < 1) Page = 1;
                    if (Page > PageCount) Page = PageCount;
                    int skip = (Page - 1) * PageSize;
                }
            }
            int _totalCount;
        }

        protected virtual void PutPagerInViewBag(QueryParameters qParams)
        {
            ViewBag.page = qParams.Page;
            ViewBag.totalCount = qParams.TotalCount;
            ViewBag.pageSize = qParams.PageSize;
            ViewBag.pageCount = qParams.PageCount;
        }

        protected virtual async Task PutCanUserInViewBag()
        {
            ViewBag.canUserEdit = await CanUserEdit();
            ViewBag.canUserCreate = await CanUserCreate();
            ViewBag.canUserDelete = await CanUserDelete();
        }
		//If we forget to implement override methods, we will keep it secure.
        protected virtual async Task<bool> CanUserCreate() { return false; }
        protected virtual async Task<bool> CanUserEdit() { return false; }
        protected virtual async Task<bool> CanUserDelete() { return false; }

        protected virtual async Task<bool> IsUserAdminAsync()
        {
            if (!_isUserAdmin.HasValue)
            {
                _isUserAdmin = Request.IsAuthenticated && 
                                await UserManager.IsInRoleAsync(UserID, SecurityRoles.Admin);
            }
            return _isUserAdmin.Value;
        }
        bool? _isUserAdmin;



        protected virtual async Task<bool> IsUserClerkAsync()
        {
            if (!_isUserClerk.HasValue)
            {
                _isUserClerk = Request.IsAuthenticated && 
                                    await UserManager.IsInRoleAsync(UserID, SecurityRoles.Clerk);
            }
            return _isUserClerk.Value;
        }
        bool? _isUserClerk;


        protected virtual async Task<bool> IsUserObserverAsync()
        {
            if (!_isUserObserver.HasValue)
            {
                _isUserObserver = Request.IsAuthenticated && 
                                    await UserManager.IsInRoleAsync(UserID, SecurityRoles.Observer);
            }
            return _isUserObserver.Value;
        }
        bool? _isUserObserver;


        protected virtual async Task<bool> IsUserSupervisorAsync()
        {
            if (!_isUserSupervisor.HasValue)
            {
                _isUserSupervisor = Request.IsAuthenticated && 
                                    await UserManager.IsInRoleAsync(UserID, SecurityRoles.Supervisor);
            }
            return _isUserSupervisor.Value;
        }
        bool? _isUserSupervisor;

        #region Find Methods for Entities

        protected virtual async Task<Contact> FindAsyncContact(int id)
        {
            return await DataContext
                            .GetContactQuery()
                            .FirstOrDefaultAsync(x => x.Id == id);
        }

		protected virtual void SetContactDefaults(Contact contact) { }

        protected virtual async Task<Supplier> FindAsyncSupplier(int id)
        {
            return await DataContext
                            .GetSupplierQuery()
                            .FirstOrDefaultAsync(x => x.Id == id);
        }

		protected virtual void SetSupplierDefaults(Supplier supplier) { }

        protected virtual async Task<Customer> FindAsyncCustomer(int id)
        {
            return await DataContext
                            .GetCustomerQuery()
                            .FirstOrDefaultAsync(x => x.Id == id);
        }

		protected virtual void SetCustomerDefaults(Customer customer) { }

        protected virtual async Task<ProductCategory> FindAsyncProductCategory(int id)
        {
            return await DataContext
                            .GetProductCategoryQuery()
                            .FirstOrDefaultAsync(x => x.Id == id);
        }

		protected virtual void SetProductCategoryDefaults(ProductCategory productCategory) { }

        protected virtual async Task<Product> FindAsyncProduct(int id)
        {
            return await DataContext
                            .GetProductQuery()
                            .FirstOrDefaultAsync(x => x.Id == id);
        }

		protected virtual void SetProductDefaults(Product product) { }

        protected virtual async Task<PurchaseOrder> FindAsyncPurchaseOrder(int id)
        {
            return await DataContext
                            .GetPurchaseOrderQuery()
                            .FirstOrDefaultAsync(x => x.Id == id);
        }

		protected virtual void SetPurchaseOrderDefaults(PurchaseOrder purchaseOrder) { }

        protected virtual async Task<OrderItem> FindAsyncOrderItem(int id)
        {
            return await DataContext
                            .GetOrderItemQuery()
                            .FirstOrDefaultAsync(x => x.Id == id);
        }

		protected virtual void SetOrderItemDefaults(OrderItem orderItem) { }

        protected virtual async Task<Process> FindAsyncProcess(int id)
        {
            return await DataContext
                            .GetProcessQuery()
                            .FirstOrDefaultAsync(x => x.Id == id);
        }

		protected virtual void SetProcessDefaults(Process process) { }

        protected virtual async Task<ProcessStep> FindAsyncProcessStep(int id)
        {
            return await DataContext
                            .GetProcessStepQuery()
                            .FirstOrDefaultAsync(x => x.Id == id);
        }

		protected virtual void SetProcessStepDefaults(ProcessStep processStep) { }

        protected virtual async Task<ProcessTemplate> FindAsyncProcessTemplate(int id)
        {
            return await DataContext
                            .GetProcessTemplateQuery()
                            .FirstOrDefaultAsync(x => x.Id == id);
        }

		protected virtual void SetProcessTemplateDefaults(ProcessTemplate processTemplate) { }

        protected virtual async Task<ProcessStepTemplate> FindAsyncProcessStepTemplate(int id)
        {
            return await DataContext
                            .GetProcessStepTemplateQuery()
                            .FirstOrDefaultAsync(x => x.Id == id);
        }

		protected virtual void SetProcessStepTemplateDefaults(ProcessStepTemplate processStepTemplate) { }
        #endregion
        
        protected void AppendExceptionMsg(Exception ex, StringBuilder sb)
        {
            if (ex == null)
                return;
            if (HttpContext.IsDebuggingEnabled)
            {
                sb.Append(ex.Message);
                sb.Append("<br/>");
                AppendExceptionMsg(ex.InnerException, sb);
            }
        }

        protected virtual ActionResult GetErrorResult(StringBuilder sb, HttpStatusCode statusCode)
        {
            Response.StatusCode = (int)statusCode;
            if (HttpContext.IsDebuggingEnabled)
            {
                sb.Append("<br/><b>RouteData.Values</b><br/>");
                foreach (var item in RouteData.Values)
                {
                    sb.Append(item.Key);
                    sb.Append(" : ");
                    sb.Append(item.Value);
                    sb.Append("<br/>");
                }
            }
            Response.StatusCode = (int)statusCode;
            return new ContentResult
            {
                ContentType = "text/plain",
                Content = sb.ToString(),
                ContentEncoding = Encoding.UTF8
            };
        }
        
        protected CriticalPathContext DataContext
        {
            get
            {
                if (_dataContext == null)
                {
                    _dataContext = new CriticalPathContext();
                }
                return _dataContext;
            }
        }
        private CriticalPathContext _dataContext;

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (_dataContext != null)
                {
                    _dataContext.Dispose();
                    _dataContext = null;
                }
            }
            base.Dispose(disposing);
        }
    }
}