using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using CriticalPath.Web.Models;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by OzzCodeGen.
//
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CriticalPath.Web.Controllers
{
    public partial class BaseController : OzzIdentity.Controllers.AbstractController 
    {
        protected virtual async Task<bool> IsUserAdminAsync()
        {
            if (!_isUserAdmin.HasValue)
            {
                _isUserAdmin = Request.IsAuthenticated && 
                                await UserManager.IsInRoleAsync(UserID, SecurityRoles.Admin);
            }
            return _isUserAdmin.Value;
        }
        bool? _isUserAdmin;



        protected virtual async Task<bool> IsUserClerkAsync()
        {
            if (!_isUserClerk.HasValue)
            {
                _isUserClerk = Request.IsAuthenticated && 
                                    await UserManager.IsInRoleAsync(UserID, SecurityRoles.Clerk);
            }
            return _isUserClerk.Value;
        }
        bool? _isUserClerk;


        protected virtual async Task<bool> IsUserObserverAsync()
        {
            if (!_isUserObserver.HasValue)
            {
                _isUserObserver = Request.IsAuthenticated && 
                                    await UserManager.IsInRoleAsync(UserID, SecurityRoles.Observer);
            }
            return _isUserObserver.Value;
        }
        bool? _isUserObserver;


        protected virtual async Task<bool> IsUserSupervisorAsync()
        {
            if (!_isUserSupervisor.HasValue)
            {
                _isUserSupervisor = Request.IsAuthenticated && 
                                    await UserManager.IsInRoleAsync(UserID, SecurityRoles.Supervisor);
            }
            return _isUserSupervisor.Value;
        }
        bool? _isUserSupervisor;
    }
}