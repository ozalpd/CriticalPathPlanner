@using CriticalPath.Web.Models
@using CriticalPath.Data
@using CP.i8n
@model IEnumerable<ProcessDTO>
@{
    ViewBag.Title = @EntityStrings.Processes;

    //Authorization Flags
    bool canUserEdit = ViewBag.canUserEdit;
    bool canUserCreate = ViewBag.canUserCreate;
    bool canUserDelete = ViewBag.canUserDelete;
    bool canSeeRestricted = ViewBag.canSeeRestricted;
    bool canUserApprove = ViewBag.canUserApprove;
    bool canUserCancelPO = ViewBag.canUserCancelPO;

    ProcessStepTemplateDTO[] templates = ViewBag.templates as ProcessStepTemplateDTO[];
    string[] stepRenderers = new string[templates.Length];

    var title = EntityStrings.Processes;
}
<div class="row well">
    <div class="col-md-8 col-sm-7">
        <h4>@title</h4>
    </div>
    <div class="col-md-4 col-sm-5">
        @Html.Partial("_SearchBoxPartial")
    </div>
</div>
<div class="ag-gridContainer">
    <div id="mainGrid" class="ag-style ag-basic" style="width:100%;height:480px;"></div>
</div>
<nav><ul id="pagerUl" class="pagination"></ul></nav>
@Html.Partial("_MessageBoxPartial")
@section scripts{
    @Scripts.Render("~/js/ag-grid")
    @Html.Partial("_IndexScriptsPartial", "Processes") @* Controller's name *@
    @Html.Partial("_agGridScriptsPartial", "/Processes/GetProcessPagedList")   @* Service url *@
    @Html.Partial("_DateSubmitMessageBox", "/ProcessSteps/SetProcessStepDate") @* Service url *@
    <script type="text/javascript">
        var result = @Html.Raw(ViewBag.result);
        var gridOptions;

        var initPage = function() {
            var init = this;
            init.columnDefs = columnDefs();
            init.gridOptions = {
                columnDefs: init.columnDefs,
                rowHeight: 57,
                pageSize: result.pageSize,
                headerHeight: 48,
                //groupHeaders: true,
                rowData: result.Items,
                pinnedColumnCount: 9,
                overlayNoRowsTemplate: '<span class="fontSize150pc">@MessageStrings.NoResults</span>'
            };

            @* Group Open/Close
                     { headerName: '@ActionStrings.Action', field: "Id", width: 60, cellRenderer: actionCellRenderer},
                     { headerName: '@EntityStrings.PurchaseOrder', field: "PoNr", width: 110, headerClass: "wrapText", headerGroup: '@ActionStrings.Details ', headerGroupShow: 'closed', cellRenderer: purchaseOrderCellRenderer },
                     { headerName: '@EntityStrings.PurchaseOrder', field: "PoNr", width: 110, headerClass: "wrapText", headerGroup: '@ActionStrings.Details ', headerGroupShow: 'open', cellRenderer: purchaseOrderCellRenderer },
                     { headerName: '@Html.DisplayNameFor(m => m.ProductCode)', field: "ProductCode", width: 90, cellClass: "wrapText", headerGroup: '@ActionStrings.Details ', headerGroupShow: 'open' },
                     { headerName: '@Html.DisplayNameFor(m => m.ProductDescription)', field: "ProductDescription", width: 90, cellClass: "wrapText", headerGroup: '@ActionStrings.Details ', headerGroupShow: 'open' },
                     { headerName: '@Html.DisplayNameFor(m => m.CustomerName)', field: "CustomerName", width: 90, cellClass: "wrapText", headerGroup: '@ActionStrings.Details ', headerGroupShow: 'open' },
                     { headerName: '@Html.DisplayNameFor(m => m.ParentCategoryName)', field: "ParentCategoryName", width: 90, headerClass: "wrapText", cellClass: "wrapText", headerGroup: '@ActionStrings.Details ', headerGroupShow: 'open' },
                     { headerName: '@Html.DisplayNameFor(m => m.Quantity)', field: "Quantity", width: 80, cellClass:'text-right', headerGroup: '@ActionStrings.Details ', headerGroupShow: 'open' },
                     { headerName: '@Html.DisplayNameFor(m => m.SupplierName)', field: "SupplierName", width: 90, cellClass: "wrapText", headerGroup: '@ActionStrings.Details ', headerGroupShow: 'open' },
            *@

            function columnDefs(){
                return[
                     { headerName: '@ActionStrings.Action', field: "Id", width: 60, cellRenderer: actionCellRenderer},
                     { headerName: '@EntityStrings.PurchaseOrder', field: "PoNr", width: 110, headerClass: "wrapText", cellRenderer: purchaseOrderCellRenderer },
                     { headerName: '@Html.DisplayNameFor(m => m.ProductCode)', field: "ProductCode", width: 90, cellRenderer:productCellRenderer, cellClass: "wrapText" },
                     { headerName: '@Html.DisplayNameFor(m => m.ProductDescription)', field: "ProductDescription", width: 90, cellClass: "wrapText" },
                     { headerName: '@Html.DisplayNameFor(m => m.CustomerName)', field: "CustomerName", width: 90, cellClass: "wrapText" },
                     { headerName: '@Html.DisplayNameFor(m => m.ParentCategoryName)', field: "ParentCategoryName", width: 90, headerClass: "wrapText", cellClass: "wrapText" },
                     { headerName: '@Html.DisplayNameFor(m => m.Quantity)', field: "Quantity", width: 80, cellClass:'text-right' },
                     { headerName: '@Html.DisplayNameFor(m => m.SupplierName)', field: "SupplierName", width: 90, cellClass: "wrapText" },
                     { headerName: '', field: "StartDate", width: 110, cellRenderer: verticalDateCellLabels },
                     { headerName: 'PO Dates', field: "ApproveDate", width: 90, cellRenderer: verticalDateCellRenderer },
                     @for (int i = 0; i < templates.Length; i++)
                     {
                         stepRenderers[i] = string.Format("stepCellRenderer{0}", templates[i].Id);
                         @:{ headerName: '@templates[i].Title', headerTooltip: '@templates[i].Title', field: "ProcessSteps", width: 98, cellRenderer: @stepRenderers[i], headerClass: "wrapText" },
                     }
                ];
            }

            @for (int i = 0; i < templates.Length; i++)
            {
                @:function @stepRenderers[i] (params){return stepToCell(params.value, @templates[i].Id, params.data.PoNr);}
                        }

            function stepToCell(steps, templateId, poNr){
                var result = '';
                $.each(steps, (function(index, step){
                    if(step.TemplateId==templateId){
                        var hasTargetDate = step.TargetDate!=null && step.TargetDate!='';
                        var hasRealizedDate = step.RealizedDate!=null && step.RealizedDate!='';
                        var realCls = hasRealizedDate ? 'row-even' : 'bg-danger';

                        //result = stepDateQrtCell(step.Id, step.ApproveDate, 'row-even', poNr + '/' + step.Title, '@EntityStrings.ApproveDate', 'submitTargetDate(' + step.Id + ')') +
                        result = stepDateQrtCell(step.Id, step.TargetDate, 'row-even', poNr + '/' + step.Title,'@EntityStrings.TargetDate', 'submitTargetDate(' + step.Id + ')', !hasTargetDate) +
                           stepDateQrtCell(step.Id, step.ForecastDate, 'row-odd', poNr + '/' + step.Title,'@EntityStrings.ForecastDate', 'submitForecastDate(' + step.Id + ')', (hasTargetDate && !hasRealizedDate)) +
                           stepDateQrtCell(step.Id, step.RealizedDate, realCls, poNr + '/' + step.Title,'@EntityStrings.RealizedDate', 'submitRealizedDate(' + step.Id + ')', (hasTargetDate && !hasRealizedDate));
                        return false;
                    }
                }));
                return result;
            }

            function stepDateQrtCell(stepId, jsonDate, clss, modalHeader, title, submitFunction, enabled){
                var cell = '<div class="verticalQuarter ' + clss + '" title="' + title + '"><div class="btn-group inline"><a ';
                if(enabled){
                    cell = cell + 'href="#dateSubmitModal" data-toggle="modal" onclick="setDateSubmitModal(\'' +
                        modalHeader + '\', \''+ title + '\', \''+ jsonDate + '\', \''+ submitFunction + '\')" class="btn btn-default btn-xxs">';
                }
                else{
                    cell = cell  + ' class="btn btn-default btn-xxs disabled">';
                }
                cell = cell  + '<span class="glyphicon glyphicon-pencil"></span></a>' +
                    '<div class="text-right" style="width:90px;">' +
                    jsonDateToLocaleDateString(jsonDate) + '</div></div></div>';

                return cell;
            }

            function productCellRenderer(params){
                var img = '';
                if(params.data.ImageUrl!=null && params.data.ImageUrl!=''){
                    img = '<label class="btn pt0 pb0 pl0 pr0" style="max-height:36px;overflow:hidden;" onclick="showImage(\''+ params.value + '\', \'' +
                        '@AppSettings.Urls.ProductImages/' + params.data.ImageUrl + '\', false)">' +
                        '<img src="@AppSettings.Urls.ThumbImages/' + params.data.ImageUrl + '" style="width:60px;margin-top:-8px;" /></label>';
                }
                return img + '<div class="verticalQuarter fontSize125pc">' + params.value + '</div>';
            }

            function purchaseOrderCellRenderer(params){
                return '<div class="verticalQuarter fontSize125pc">' + params.value + '</div>' +
                    '<div class="verticalQuarter text-right pr10" title="@EntityStrings.OrderDate">' + jsonDateToLocaleDateString(params.data.OrderDate) + '</div>' +
                    '<div class="verticalQuarter text-right pr10" title="@EntityStrings.DueDate">' + jsonDateToLocaleDateString(params.data.DueDate) + '</div>';
                @*'<div class="verticalQuarter" title="@EntityStrings.OrderDate">@EntityStrings.OrderDate <span class="text-right">' + jsonDateToLocaleDateString(params.data.OrderDate) + '</span></div>' +
                    '<div class="verticalQuarter" title="@EntityStrings.DueDate"> @EntityStrings.DueDate <span class="text-right">' + jsonDateToLocaleDateString(params.data.DueDate) + '</span></div>';*@
            }
            function verticalDateCellRenderer(params){
                //return '<div class="verticalQuarter text-right row-even">' +  jsonDateToLocaleDateString(params.data.ApproveDate) + '</div>' +
                return    '<div class="verticalQuarter text-right row-even">' +  jsonDateToLocaleDateString(params.data.TargetDate) + '</div>' +
                    '<div class="verticalQuarter text-right row-odd">' +  jsonDateToLocaleDateString(params.data.ForecastDate) + '</div>' +
                    '<div class="verticalQuarter text-right row-even">' +  jsonDateToLocaleDateString(params.data.RealizedDate) + '</div>';
            }

            function verticalDateCellLabels(params){
                //return '<div class="verticalQuarter row-even">@EntityStrings.ApproveDate</div>' +
                return    '<div class="verticalQuarter row-header">@EntityStrings.TargetDate</div>' +
                    '<div class="verticalQuarter row-header">@EntityStrings.ForecastDate</div>' +
                    '<div class="verticalQuarter row-header">@EntityStrings.RealizedDate</div>';
            }

            function actionCellRenderer(params) {
                var isCancelled = params.data.Cancelled==null ? false : params.data.Cancelled;
                var isApproved = params.data.IsApproved==null ? false : params.data.IsApproved;
                var isCompleted = params.data.IsCompleted==null ? false : params.data.IsCompleted;

                var actions = '<div class="btn-group" style="margin-top:-3px;">' +
                    '<button type="button" title="@ActionStrings.Action" class="btn btn-xs btn-primary dropdown-toggle" data-toggle="dropdown" onclick="onActionMenuClick(this)">' +
                    '<span class="glyphicon glyphicon-tasks"></span> <span class="caret"></span>' +
                    '</button>' +
                    '<ul class="dropdown-menu mb15" role="menu">' +
                    '<li><a href="@Url.Action("Details")/' + params.value + '">@ActionStrings.Details</a></li>';
                @if (canUserEdit)
                {
                        @:actions = actions + '<li><a href="@Url.Action("Edit")/' + params.value + '">@ActionStrings.Edit</a></li>';
                        @:actions = actions + '<li><a href="@Url.Action("Edit", "Products", null)/' + params.data.ProductId + '">@EntityStrings.EditProduct</a></li>';
                                                                                                                                                }
                @if (canUserCancelPO)
                {
                        @:if(!isCancelled){actions = actions + '<li><a href="@Url.Action("CancelPO", "PurchaseOrders", null)/' + params.data.PurchaseOrderId + '">@ActionStrings.CancelPO</a></li>';}
                                                                                                                                }
                @if (canUserApprove)
                {
                    @:if(!(isCancelled || isApproved)){actions = actions + '<li><a href="@Url.Action("ApproveProcess")/' + params.value + '">@ActionStrings.Approve</a></li>';}
                                                                                                                                }
                actions = actions + '</ul></div>';
                var title = '';

                if(isCancelled){
                    var date = new Date(params.data.CancelDate);
                    title= '@EntityStrings.CancelDate ' + date.toLocaleDateString();
                    actions = actions + '<div title="' + title + '">' + boolToGlyphRemoved(isCancelled) + '</div>';
                }
                else{
                    if(isApproved){
                        var date = new Date(params.data.ApproveDate);
                        title= '@EntityStrings.ApproveDate ' + date.toLocaleDateString();
                    }
                    actions = actions + '<div title="' + title + '">' + boolToGlyphicon(isApproved) + '</div>';
                }
                if(isCompleted){
                    var date = new Date(params.data.RealizedDate);
                    title= '@EntityStrings.RealizedDate ' + date.toLocaleDateString();
                    actions = actions + '<div title="' + title + '">' + boolToGlyphicon(isCompleted) + '</div>';
                }
                return actions;
            }

            $('#mainContent').removeClass('body-content').addClass('wGrid');
            $('#mainFooter').hide();
            window.addEventListener('resize', onWindowResize);

            function resizeGrid() {
                var minHeght = 300;
                var rectGrid = document.getElementById("mainGrid").getBoundingClientRect();
                var pagerParent = $("#pagerUl").parent();
                var pagerHeight = pagerParent!=null ? pagerParent.height() + 20 : 110;
                var newHeight = $(window).height() - rectGrid.top - pagerHeight;
                if(newHeight < minHeght){
                    newHeight = minHeght;
                }
                $('#mainGrid').height(newHeight);
            }

            function onWindowResize() {
                setTimeout(resizeGrid, 100);
            }

            $.ajaxSetup({ cache: false });
            gridOptions = init.gridOptions;
            // angularGrid is a global function
            agGridGlobalFunc('#mainGrid', gridOptions);

            setPagerButtons($('#pagerUl'), result.Page, result.PageCount);
            displayRecordStats(result.Items.length, result.TotalCount);
            resizeGrid();
        }

        function submitTargetDate(id) { submitDate(id, {targetDate:$('#dateInput').val()}); }
        function submitForecastDate(id) { submitDate(id, {forecastDate:$('#dateInput').val()}); }
        function submitRealizedDate(id) { submitDate(id, {realizedDate:$('#dateInput').val()}); }


        function onActionMenuClick(menuBtn){
            setTimeout(function(){
                var menuHeight = 220;
                var rectMenu = menuBtn.getBoundingClientRect();
                var rectGrid = document.getElementById("mainGrid").getBoundingClientRect();

                var diffY = rectGrid.bottom - rectMenu.bottom - menuHeight;
                if (diffY < 0) {
                    var viewport = $('#mainGrid .ag-body-viewport');
                    var viewportScroll = viewport.scrollTop();
                    viewport.scrollTop((diffY * -1) + viewportScroll);
                }
            },250);
        }
        document.addEventListener("DOMContentLoaded", initPage());
    </script>
}