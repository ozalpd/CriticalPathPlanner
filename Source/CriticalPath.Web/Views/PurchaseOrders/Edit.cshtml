@using CriticalPath.Web.Models
@using CriticalPath.Data
@using CriticalPath.Data.Resources
@model PurchaseOrderEditVM
@{
    ViewBag.Title = EntityStrings.EditPurchaseOrder;
}
<h2 class="col-lg-offset-2 col-md-offset-3 col-sm-offset-3">@ViewBag.Title</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.Id)

        <div class="row">
            <label class="control-label col-md-2 col-sm-3 col-xs-3">
                @Html.DisplayNameFor(model => model.OrderDate)
            </label>
            <div class="col-lg-1 col-md-1 col-sm-2 col-xs-3 mt10">@Html.DisplayFor(m => m.OrderDate)</div>
        </div>
        <div class="row">
            <label class="control-label col-md-2 col-sm-3 col-xs-3">
                <span class="approveText">@Html.DisplayNameFor(model => model.IsApproved)</span>
                @Html.DisplayFor(m => m.IsApproved)
            </label>
            <div class="col-xs-6 mt10">
                @Html.DisplayFor(m => m.ApproveDate)
            </div>
        </div>
        <div class="row">
            <label class="control-label col-md-2 col-sm-3 col-xs-3">
                @Html.DisplayNameFor(model => model.DueDate)
            </label>
            <div class="col-lg-1 col-md-1 col-sm-2 col-xs-3 mt10">@Html.DisplayFor(m => m.DueDate)</div>
        </div>
        @if (Model.IsApproved)
        {
            @Html.HiddenFor(m => m.CustomerId)
            <div class="row">
                <label class="control-label col-md-2 col-sm-3">
                    @Html.DisplayNameFor(model => model.Customer)
                </label>
                <div class="col-md-10 col-sm-9 fontSize150pc mt10">
                    @Html.DisplayFor(m => m.Customer.CompanyName)
                </div>
            </div>
            @Html.HiddenFor(m => m.ProductId)
            <div class="row">
                <label class="control-label col-md-2 col-sm-3">
                    @Html.DisplayNameFor(model => model.Product)
                </label>
                <div class="col-md-10 col-sm-9 fontSize150pc mt10">
                    @Html.DisplayFor(m => m.Product.Title)
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7">
                    @Html.DropDownList("CustomerId", null, ActionStrings.SelectPlease, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.CustomerId, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        <div class="form-group mt15">
            @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.Code, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.Code, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.Description, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (Model.IsApproved)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7 mt10">
                    @Html.DisplayFor(m => m.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7 mt10">
                    @Html.DisplayFor(m => m.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7">
                    @Html.EditorFor(m => m.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7">
                    @Html.EditorFor(m => m.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.UnitPrice, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        <div class="row mb20">
            <label class="control-label col-md-2 col-sm-3">
                @Html.DisplayNameFor(model => model.SizingStandard)
            </label>
            <div class="col-md-10 col-sm-9">
                @Html.DisplayFor(m => m.SizingStandard.Title)
            </div>
            <div class="col-lg-6 col-md-7 col-sm-8">
                @foreach (var sizing in Model.SizingStandard.Sizings)
                {
                    <div class="col-xs-2 shadedCaption">@sizing.Caption</div>
                }
            </div>

        </div>
        <div class="row mb20">
            <label class="control-label col-md-2 col-sm-3">
                @Html.DisplayNameFor(model => model.SizeRates)
            </label>
            <div class="col-lg-6 col-md-7 col-sm-8">
                @foreach (var rate in Model.SizeRates)
                {
                    <div class="col-xs-2 shadedCaption">@rate.Caption: @rate.Rate</div>
                }
                <div class="col-xs-1 mr4">&nbsp;</div>
                <div class="col-xs-3 shadedCaption fontSize125pc">
                    @Html.DisplayFor(m => m.SizeRateDivisor)
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.EditorFor(m => m.Notes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Notes, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.Partial("_SaveButtonsPartial")
    </div>
}
@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}
