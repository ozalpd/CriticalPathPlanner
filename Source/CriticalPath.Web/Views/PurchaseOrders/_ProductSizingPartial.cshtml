@using CriticalPath.Web.Models
@using CriticalPath.Data
@using CP.i8n
@model PurchaseOrderCreateVM

@Html.HiddenFor(m => m.SizeRate1Id)
@Html.HiddenFor(m => m.SizeRate2Id)
@Html.HiddenFor(m => m.SizeRate3Id)
@Html.HiddenFor(m => m.SizeRate4Id)
@Html.HiddenFor(m => m.SizeRate5Id)
@Html.HiddenFor(m => m.SizeRate6Id)
@Html.HiddenFor(m => m.SizeRate7Id)
@Html.HiddenFor(m => m.SizeRate8Id)
@Html.HiddenFor(m => m.SizeRate9Id)
@Html.HiddenFor(m => m.SizeRate10Id)
@Html.HiddenFor(m => m.SizeRate11Id)
@Html.HiddenFor(m => m.SizeRate12Id)
<div class="form-group">
    @Html.LabelFor(model => model.SizingStandardId, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
    <div class="col-lg-5 col-md-6 col-sm-7">
        @Html.DropDownList("SizingStandardId", null, ActionStrings.SelectPlease, htmlAttributes: new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.SizingStandardId, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group">
    <label class="control-label col-lg-2 col-md-3 col-sm-3">@EntityStrings.SizeRatios</label>
    <div class="col-lg-7 col-md-8 col-sm-9">
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size1Caption, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly", disabled = "true" } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size1Rate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", min = 0 } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size2Caption, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly", disabled = "true" } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size2Rate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", min = 0 } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size3Caption, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly", disabled = "true" } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size3Rate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", min = 0 } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size4Caption, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly", disabled = "true" } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size4Rate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", min = 0 } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size5Caption, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly", disabled = "true" } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size5Rate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", min = 0 } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size6Caption, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly", disabled = "true" } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size6Rate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", min = 0 } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size7Caption, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly", disabled = "true" } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size7Rate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", min = 0 } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size8Caption, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly", disabled = "true" } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size8Rate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", min = 0 } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size9Caption, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly", disabled = "true" } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size9Rate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", min = 0 } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size10Caption, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly", disabled = "true" } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size10Rate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", min = 0 } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size11Caption, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly", disabled = "true" } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size11Rate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", min = 0 } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size12Caption, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", @readonly = "readonly", disabled = "true" } })
        </div>
        <div class="col-xs-2 pl0 mb5">
            @Html.EditorFor(m => m.Size12Rate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", min = 0 } })
        </div>
        <div class="col-xs-4 pl0">
            <input id="SizeRatioDivisorDisplay" type="text" class = "form-control" readonly = "readonly" autocomplete = "off" value="0"/>
            @Html.HiddenFor(m => m.SizeRatioDivisor)
            @Html.ValidationMessageFor(m => m.SizeRatioDivisor, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
<script type="text/javascript">
    var sizingSelect = $('#SizingStandardId');
    var sizingCaptions = [$('#Size1Caption'),$('#Size2Caption'),$('#Size3Caption'),$('#Size4Caption'),$('#Size5Caption'),$('#Size6Caption'),$('#Size7Caption'),$('#Size8Caption'),$('#Size9Caption'),$('#Size10Caption'),$('#Size11Caption'),$('#Size12Caption')];
    var sizingRates = [$('#Size1Rate'),$('#Size2Rate'),$('#Size3Rate'),$('#Size4Rate'),$('#Size5Rate'),$('#Size6Rate'),$('#Size7Rate'),$('#Size8Rate'),$('#Size9Rate'),$('#Size10Rate'),$('#Size11Rate'),$('#Size12Rate')];
    var productList = [];
    var sizingStandards = @Html.Raw(ViewBag.sizingStandards);

    function enableCaptions() {
        $.each(sizingCaptions, function(index, caption){
            caption.prop('readonly', '');
        });
    }
    function setSizingStandard(standardId) {
        if (sizingSelect != null) {
            $("#SizingStandardId > option").each(function () {
                if (this.value == standardId) {
                    $(this).prop('selected', true);
                }
                else {
                    $(this).prop('selected', false);
                }
            });
        }
    }
    function setSizingCaptions() {
        var selectedId = $(sizingSelect).val();
        $.each(sizingCaptions, function (index, caption) {
            caption.val('');
        });
        $.each(sizingRates, function(index, rate){
            rate.prop('readonly', 'readonly');
        });
        if (selectedId != null && selectedId != '') {
            $.each(sizingStandards, function (index, standard) {
                if (selectedId == standard.Id) {
                    $.each(standard.Sizings, function(index, sizing){
                        sizingCaptions[index].val(sizing.Caption);
                        sizingRates[index].prop('readonly', '');
                    });
                }
            });
        }
        $.each(sizingRates, function(index, rate){
            if(rate.prop('readonly')){
                rate.val('');
            }
        });
        calculateDivisor();
    }
    sizingSelect.change(setSizingCaptions);

    function calculateDivisor(evt) {
        if(evt!=null && evt.keyCode==9){//Tab
            return;
        }
        var divisor = 0;
        
        $.each(sizingRates, function(index, rate){
            rateVal = rate.val();
            if(rateVal!=null && rateVal!=''){
                var rateInt = parseInt(rateVal);
                divisor = divisor + rateInt;
                if(rateInt>0){
                    rate.val(rateInt);
                }
            }
        });

        $('#SizeRatioDivisor').val(divisor);
        $('#SizeRatioDivisorDisplay').val(divisor);
    }
    $(document).ready(function () {
        $.each(sizingRates, function(index, rate){
            rate.on('keydown', numbersOnly);
            rate.on('keyup', calculateDivisor);
            setSizingCaptions();
            $('#UnitPrice').on('keydown', decNumbersOnly);
            $('#Quantity').on('keydown', numbersOnly);
        });
        $.each(sizingRates,function(index, rate){
            rate.on('change', calculateDivisor);
        });
    });
</script>