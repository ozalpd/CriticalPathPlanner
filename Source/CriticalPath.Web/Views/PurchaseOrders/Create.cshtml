@using CriticalPath.Web.Models
@using CriticalPath.Data
@using CP.i8n
@model PurchaseOrderCreateVM
@{
    ViewBag.Title = EntityStrings.CreatePurchaseOrder;
    if (Model.Customer != null)
    {
        Model.CustomerId = Model.Customer.Id;
    }
}
<h2 class="col-lg-offset-2 col-md-offset-3 col-sm-offset-3">@ViewBag.Title</h2>
<form action="/PurchaseOrders/Create" method="post" onsubmit="enableCaptions();">
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(m => m.CustomerId)
        @Html.HiddenFor(m => m.IsRepeat)
        @Html.HiddenFor(m => m.ParentPoId)

        @if (Model.IsRepeat)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.ParentPoNr, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7">
                    @Html.TextBoxFor(m => m.ParentPoNr, new { @class = "form-control", autocomplete = "off", @readonly = "readonly" })
                </div>
            </div>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.PoNr, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.PoNr, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.PoNr, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.RefCode, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.RefCode, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.RefCode, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.KimballNr, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.KimballNr, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.KimballNr, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.OrderDate, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.EditorFor(m => m.OrderDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                @Html.ValidationMessageFor(m => m.OrderDate, "", new { @class = "text-danger" })
            </div>
        </div>
        @*
            <div class="form-group">
                @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7">
                    @Html.EditorFor(m => m.DueDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.DueDate, "", new { @class = "text-danger" })
                </div>
            </div>
        *@
        @if (Model.Customer != null)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Customer, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7">
                    @Html.TextBoxFor(m => m.CustomerName, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7">
                    @Html.EditorFor(m => m.CustomerName, new
               {
                   htmlAttributes = new
                   {
                       @class = "form-control ui-autocomplete-input",
                       autocomplete = "off",
                       data_url = Url.Action("GetCustomersForAutoComplete", "Customers")
                   }
               })
                    @Html.ValidationMessageFor(m => m.CustomerName, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        <div class="form-group">
            @Html.LabelFor(model => model.CustomerPoNr, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.CustomerPoNr, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.CustomerPoNr, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.DiscountRate, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-2 col-md-3 col-sm-3">
                @{ Html.EnableClientValidation(false); }
                @Html.EditorFor(m => m.DiscountRate, new { htmlAttributes = new { @class = "form-control text-right" } })
                @{ Html.EnableClientValidation(true); }
                @Html.ValidationMessageFor(m => m.DiscountRate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FreightTermId, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.DropDownListFor(m => m.FreightTermId, null, ActionStrings.SelectPlease, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.FreightTermId, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.Product == null)
        {
            @Html.Partial("_ProductAutoComplete")
        }
        else
        {
            @Html.HiddenFor(m => m.ProductId)
            <div class="form-group">
                @Html.LabelFor(model => model.ProductCode, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7">
                    @Html.EditorFor(m => m.ProductCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(m => m.SupplierId, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        @Html.Partial("_AllPriceEdit", Model)

        <div class="form-group">
            @Html.LabelFor(model => model.SupplierId, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.DropDownListFor(m => m.SupplierId, null, ActionStrings.SelectPlease, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.SupplierId, "", new { @class = "text-danger" })
            </div>
        </div>
        @*
            <div class="form-group">
                @Html.LabelFor(model => model.SupplierDueDate, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7">
                    @Html.EditorFor(m => m.SupplierDueDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.SupplierDueDate, "", new { @class = "text-danger" })
                </div>
            </div>
        *@
        @Html.Partial("_ProductSizingPartial")

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.Description, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.Notes, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.Partial("_SaveButtonsPartial")
    </div>
</form>
@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $('#CustomerName').autocomplete({
            minLenght: 1,
            delay: 500,
            source: function (request, response) {
                var url = $(this.element).data('url');
                $.getJSON(url, { searchString: request.term, pageSize: 25 }, function (data) {
                    response(data);
                });
            },
            select: function (event, ui) {
                var customerId = ui.item.id;
                $('#CustomerId').val(customerId);
                $('#DiscountRate').val(fixDecimalVal(ui.item.DiscountRate));
            },
            change: function (event, ui) {
                if (ui.item == null) {
                    $(event.target).val('');
                    $('#CustomerId').val('');
                }
            },
            open: function (event, ui) {
                var boxWidth = $('#CustomerName').outerWidth();
                var minWidth = 300;
                $(this).autocomplete("widget")
                    .css({ "width": (boxWidth > minWidth ? boxWidth : minWidth) })
                    .addClass('fontSize80pc');
            }
        });
    </script>
}
