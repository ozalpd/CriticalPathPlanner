@using CriticalPath.Web.Models
@using CriticalPath.Data
@using CP.i8n
@model PurchaseOrderCreateVM
@{
    ViewBag.Title = EntityStrings.CreatePurchaseOrder;
    if (Model.Customer != null)
    {
        Model.CustomerId = Model.Customer.Id;
    }
}
<h2 class="col-lg-offset-2 col-md-offset-3 col-sm-offset-3">@ViewBag.Title</h2>
<form action="/PurchaseOrders/Create" method="post" onsubmit="enableCaptions();">
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(m => m.CustomerId)
        @Html.HiddenFor(m => m.IsRepeat)
        @Html.HiddenFor(m => m.ParentPoId)

        @if (Model.IsRepeat)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.ParentPoNr, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7">
                    @Html.TextBoxFor(m => m.ParentPoNr, new { @class = "form-control", autocomplete = "off", @readonly = "readonly" })
                </div>
            </div>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.PoNr, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.PoNr, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.PoNr, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.RefCode, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.RefCode, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.RefCode, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CustomerRefNr, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.CustomerRefNr, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.CustomerRefNr, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.OrderDate, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.EditorFor(m => m.OrderDate, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                @Html.ValidationMessageFor(m => m.OrderDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DesignerId, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.DropDownListFor(m => m.DesignerId, null, ActionStrings.SelectPlease, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.DesignerId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Merchandiser1Id, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.DropDownListFor(m => m.Merchandiser1Id, null, ActionStrings.SelectPlease, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Merchandiser1Id, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Merchandiser2Id, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.DropDownListFor(m => m.Merchandiser2Id, null, ActionStrings.SelectPlease, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Merchandiser2Id, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.Customer != null)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Customer, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7">
                    @Html.TextBoxFor(m => m.CustomerName, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-5 col-md-6 col-sm-7">
                    @Html.EditorFor(m => m.CustomerName, new
               {
                   htmlAttributes = new
                   {
                       @class = "form-control ui-autocomplete-input",
                       autocomplete = "off",
                       data_url = Url.Action("GetCustomersForAutoComplete", "Customers")
                   }
               })
                    @Html.ValidationMessageFor(m => m.CustomerName, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        <div class="form-group">
            @Html.LabelFor(model => model.CustomerDepartmentId, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.DropDownListFor(m => m.CustomerDepartmentId, null, ActionStrings.SelectPlease, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.CustomerDepartmentId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CustomerPoNr, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.CustomerPoNr, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.CustomerPoNr, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(m => m.LicensorId)
        <div class="form-group">
            @Html.LabelFor(m => m.LicensorName, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.EditorFor(m => m.LicensorName, new
           {
               htmlAttributes = new
               {
                   @class = "form-control ui-autocomplete-input",
                   autocomplete = "off",
                   data_url = Url.Action("GetLicensorsForAutoComplete", "Licensors")
               }
           })
                @Html.ValidationMessageFor(m => m.LicensorName, "", new { @class = "text-danger" })
                @Html.ValidationMessageFor(m => m.LicensorId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DiscountRate, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-2 col-md-3 col-sm-3">
                @{ Html.EnableClientValidation(false); }
                @Html.EditorFor(m => m.DiscountRate, new { htmlAttributes = new { @class = "form-control text-right" } })
                @{ Html.EnableClientValidation(true); }
                @Html.ValidationMessageFor(m => m.DiscountRate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FreightTermId, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.DropDownListFor(m => m.FreightTermId, null, ActionStrings.SelectPlease, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.FreightTermId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShipmentHangingFolded, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.EditorFor(m => m.ShipmentHangingFolded, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.ShipmentHangingFolded, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.HangerSticker, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.EditorFor(m => m.HangerSticker, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                @Html.ValidationMessageFor(m => m.HangerSticker, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.Product == null)
        {
            @Html.Partial("_ProductAutoComplete")
        }
        else
        {
            @Html.HiddenFor(m => m.ProductId)
            <div class="form-group">
                @Html.LabelFor(model => model.ProductCode, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
                <div class="col-lg-4 col-md-5 col-sm-5">
                    @Html.EditorFor(m => m.ProductCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(m => m.SupplierId, "", new { @class = "text-danger" })
                </div>
                @if (!string.IsNullOrEmpty(Model.Product.ImageUrl))
                {
                    <div class="col-xs-12 visible-xs mb5 mt5"></div>
                    <div class="col-sm-2 col-md-1 pl0">
                        <label class="btn pt0 pb0 pl0 pr0 thumbInListWrapper"
                               onclick="showImage('@Html.Encode(Model.Product.ProductCode)', '@Model.ProductImage', false)">
                            <img src='@Model.ProductThumb' alt='@Model.ProductCode' style="margin-top:-5px;width:100%" class="pull-right" />
                        </label>
                    </div>
                }
            </div>
        }
        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.Description, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.FabricComposition, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.FabricComposition, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.FabricComposition, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Colour, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.Colour, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.Colour, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Print, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.Print, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.Print, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Labelling, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.Labelling, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.Labelling, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.WovenLabel, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.EditorFor(m => m.WovenLabel, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
                @Html.ValidationMessageFor(m => m.WovenLabel, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.WashingInstructions, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextBoxFor(m => m.WashingInstructions, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.WashingInstructions, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.Partial("_AllPriceEdit", Model)

        <div class="form-group">
            @Html.LabelFor(model => model.SupplierId, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.DropDownListFor(m => m.SupplierId, null, ActionStrings.SelectPlease, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.SupplierId, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.Partial("_ProductSizingPartial")

        <div class="form-group">
            @Html.LabelFor(model => model.InitialComments, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextAreaFor(m => m.InitialComments, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.InitialComments, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-lg-2 col-md-3 col-sm-3" })
            <div class="col-lg-5 col-md-6 col-sm-7">
                @Html.TextAreaFor(m => m.Notes, new { @class = "form-control", autocomplete = "off" })
                @Html.ValidationMessageFor(m => m.Notes, "", new { @class = "text-danger" })
            </div>
        </div>
        @Html.Partial("_SaveButtonsPartial")
    </div>
</form>
@Html.Partial("_MessageBoxPartial")
@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Html.Partial("_IndexScriptsPartial", "PurchaseOrders")
    <script type="text/javascript">
        $('#CustomerName').autocomplete({
            minLenght: 1,
            delay: 500,
            source: function (request, response) {
                var url = $(this.element).data('url');
                $.getJSON(url, { searchString: request.term, pageSize: 25 }, function (data) {
                    response(data);
                });
            },
            select: function (event, ui) {
                var customerId = ui.item.id;
                $('#CustomerId').val(customerId);
                $('#DiscountRate').val(fixDecimalVal(ui.item.DiscountRate));
                if (customerId != null && customerId != '') {
                    $.getJSON('/CustomerDepartments/GetCustomerDepartmentList', { customerId: customerId, pageSize: 100 }, function (customerDepartments) {
                        var targetSelect = $('#CustomerDepartmentId');
                        targetSelect.empty();
                        targetSelect.append($('<option/>', {
                            value: '',
                            text: '@Html.Raw(ActionStrings.SelectPlease)'
                        }));
                        $.each(customerDepartments, function (index, customerDepartment) {
                            targetSelect.append($('<option/>', {
                                value: customerDepartment.Id,
                                text: customerDepartment.DepartmentName
                            }));
                        });
                    });
                }
            },
            change: function (event, ui) {
                if (ui.item == null) {
                    $(event.target).val('');
                    $('#CustomerId').val('');
                }
            },
            open: function (event, ui) {
                var boxWidth = $('#CustomerName').outerWidth();
                var minWidth = 300;
                $(this).autocomplete("widget")
                    .css({ "width": (boxWidth > minWidth ? boxWidth : minWidth) })
                    .addClass('fontSize80pc');
            }
        });

        $('#LicensorName').autocomplete({
            minLenght: 1,
            delay: 500,
            source: function (request, response) {
                var url = $(this.element).data('url');
                $.getJSON(url, { searchString: request.term, pageSize: 25 }, function (data) {
                    response(data);
                });
            },
            select: function (event, ui) {
                var itemId = ui.item.id;
                $('#LicensorId').val(itemId);
            },
            change: function (event, ui) {
                if (ui.item == null) {
                    $(event.target).val('');
                    $('#LicensorId').val('');
                }
            },
            open: function (event, ui) {
                var boxWidth = $('#LicensorName').outerWidth();
                var minWidth = 300;
                $(this).autocomplete("widget")
                    .css({ "width": (boxWidth > minWidth ? boxWidth : minWidth) })
                    .addClass('fontSize80pc');
            }
        });
    </script>
}
