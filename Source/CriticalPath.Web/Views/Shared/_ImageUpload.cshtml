@using CP.i8n
@using CriticalPath.Data
@using CriticalPath.Web.Models
@model ImageUploadViewModel
@{
    string multiUpload = Model.MultiUpload ? "multiple upload" : "upload";
    bool modal = ViewBag.Modal ?? false;
}
<input type="hidden" id='@Model.PropertyName' name='@Model.PropertyName' value="@Model.ImageName" class="form-control mb10" />
<div class="control-group">
    <div class="controls">
        <span id="fileInputButton" class="btn btn-lg btn-success fileinput-button">
            <i class="glyphicon glyphicon-camera"></i>
            <input id="fileupload" type="file" name="file" data-url='@Model.UploadUrl' @Html.Raw(multiUpload)>
            <span class="ml5 mr5">@ActionStrings.AddImage</span>
        </span>
    </div>
</div>
<img id="imgUploaded" src='' class="mt10 mb10" style="max-height:100%;max-height:256px;display:none;" />
<div id="progress" class="progress mt5">
    <div class="progress-bar progress-bar-success"></div>
</div>
<div id="files" class="files"></div>
@if (!string.IsNullOrEmpty(Model.ImageName))
{
    <div class="clearfix"></div>
    <div>
        <h4>@CommonStrings.CurrentImage</h4>
        <img src='@Model.ImageFolderUrl/@Model.ImageName' alt="@Model.ImageName" style="max-height:100%;max-height:256px;" />
        <div class="mt5">@Model.ImageName</div>
    </div>
}
<script type="text/javascript">
    'use strict';
    function initFileUpload() {
        var url = '@Model.UploadUrl';
        var pendingFiles = [];
        var maxNumberOfFiles = 1;
        var uploadButton = $('<button/>')
            .addClass('btn btn-primary ml10 pull-right')
            .prop('disabled', true)
            .text('Processing...')
            .on('click', function () {
                var $this = $(this),
                    data = $this.data();
                $this
                    .off('click')
                    .text('@ActionStrings.Cancel')
                    .on('click', function () {
                        $this.remove();
                        data.abort();
                    });
                data.submit().always(function () {
                    $this.remove();
                }).done(function (e, r) {
                    $('#@Model.PropertyName').val(e.filename);
                    $('#imgUploaded').attr('src', '@Model.ImageFolderUrl/' + e.filename);
                    $('#imgUploaded').show(250);
                    $(data.context).hide(250).remove();
                });
                return false;
            });
        var removeButton = $('<a/>')
            .addClass('btn btn-danger ml10 pull-right')
            //.text('Vazgeç')
            .append($('<i/>').addClass('glyphicon glyphicon-trash'))
            .on('click', function () {
                var $this = $(this),
                    data = $this.data();
                //console.log(data);
                $.each(data.files, function (index, file) {
                    pendingFiles.pop(file);
                });
                if (pendingFiles.length < maxNumberOfFiles) {
                    $('#fileupload').removeAttr('disabled');
                    $('#fileInputButton').removeClass('disabled');
                }
                $(data.context).hide(250).remove();
                return false;
            });
        $('#fileupload').fileupload({
            url: url,
            dataType: 'json',
            autoUpload: false,
            dropZone: $('#fileupload'),
            maxNumberOfFiles: maxNumberOfFiles,
            acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
            maxFileSize: 2048 * 1024,
            loadImageMaxFileSize: 2048 * 10240,
            // Enable image resizing, except for Android and Opera,
            // which actually support image resizing, but fail to
            // send Blob objects via XHR requests:
            disableImageResize: /Android(?!.*Chrome)|Opera/
                .test(window.navigator.userAgent),
            imageMaxWidth: 1200,
            imageMaxHeight: 1200,
            previewMaxWidth: 100,
            previewMaxHeight: 100,
            previewCrop: true
        }).on('fileuploadadd', function (e, data) {
            data.context = $('<div/>').appendTo('#files');
            $.each(data.files, function (index, file) {
                if (pendingFiles.length < maxNumberOfFiles) {
                    pendingFiles.push(file);
                    var node = $('<div/>').addClass('col-md-9')
                            .append($('<span/>').text(file.name));
                    if (!index) {
                        var buttons = $('<div/>').addClass('col-md-9')
                            .append(removeButton.clone(true).data(data))
                            .append(uploadButton.clone(true).data(data));
                        buttons.appendTo(data.context);
                    }
                    node.appendTo(data.context);
                    if (pendingFiles.length == maxNumberOfFiles) {
                        $('#fileupload').attr('disabled', true);
                        $('#fileInputButton').addClass('disabled');
                    }
                }
                else {
                    $('#fileupload').attr('disabled', true);
                    $('#fileInputButton').addClass('disabled');
                }
            });
        }).on('fileuploaddestroy', function (e, data) {
            $.each(data.files, function (index, file){
                pendingFiles.pop(file);
            });
        }).on('fileuploadprocessalways', function (e, data) {
            var index = data.index,
                file = data.files[index],
                node = $(data.context.children()[index]);
            if (file.preview) {
                node.prepend(file.preview);
            }
            if (file.error) {
                node
                    .append('<br>')
                    .append($('<span class="text-danger"/>').text(file.error));
            }
            if (index + 1 === data.files.length) {
                data.context.find('button.btn-primary')
                    .text('@ActionStrings.Upload')
                    .prop('disabled', !!data.files.error);
            }
        }).on('fileuploadprogressall', function (e, data) {
            var progress = parseInt(data.loaded / data.total * 100, 10);
            $('#progress .progress-bar').css(
                'width',
                progress + '%'
            );
        }).on('fileuploaddone', function (e, data) {
            $.each(data.result.files, function (index, file) {
                if (file.url) {
                    var link = $('<a>')
                        .attr('target', '_blank')
                        .prop('href', file.url);
                    $(data.context.children()[index])
                        .wrap(link);
                } else if (file.error) {
                    var error = $('<span class="text-danger"/>').text(file.error);
                    $(data.context.children()[index])
                        .append('<br>')
                        .append(error);
                }
            });
        }).on('fileuploadfail', function (e, data) {
            $.each(data.files, function (index) {
                var error = $('<span class="text-danger"/>').text('File upload failed.');
                $(data.context.children()[index])
                    .append('<br>')
                    .append(error);
            });
        }).prop('disabled', !$.support.fileInput)
        .parent().addClass($.support.fileInput ? undefined : 'disabled');
    }
    @if (modal)
    {
        @: (function () { initFileUpload(); })();
    }
    else
    {
        @: (function () { document.addEventListener("DOMContentLoaded", function () { initFileUpload(); }); })();
    }
</script>