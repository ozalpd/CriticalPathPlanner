@using CriticalPath.Web.Controllers
@using CriticalPath.Web.Models
@using CriticalPath.Data
@using CP.i8n
@model IEnumerable<Supplier>
@{
    ViewBag.Title = @EntityStrings.Suppliers;

    //Authorization Flags
    bool canUserEdit = ViewBag.canUserEdit;
    bool canUserCreate = ViewBag.canUserCreate;
    bool canUserDelete = ViewBag.canUserDelete;
    bool canUserAddContact = ViewBag.canUserAddContact;
    bool canUserDiscontinue = ViewBag.canUserDiscontinue;
}
<div class="row well">
    <div class="col-md-8 col-sm-7">
        <h4>@EntityStrings.Suppliers</h4>
    </div>
    <div class="col-md-4 col-sm-5">
        @Html.Partial("_SearchBoxPartial")
    </div>
</div>
<div id="mainGrid" class="ag-style ag-basic" style="width:100%;height:360px;"></div>
<nav><ul id="pagerUl" class="pagination"></ul></nav>
@Html.Partial("_MessageBoxPartial")
@section scripts{
    @Scripts.Render("~/js/ag-grid")
    @Html.Partial("_IndexScriptsPartial", "Suppliers") @* Controller's name *@
    @Html.Partial("_agGridScriptsPartial", "/Suppliers/GetSupplierPagedList") @* Service url *@
    <script type="text/javascript">
        var result = @Html.Raw(ViewBag.result);
        var gridOptions;

        var initPage = function() {
            var init = this;
            init.columnDefs = columnDefs();
            init.gridOptions = {
                columnDefs: init.columnDefs,
                rowHeight: 26,
                pageSize: result.pageSize,
                headerHeight: 32,
                rowData: result.Items,
                overlayNoRowsTemplate: '<span class="fontSize150pc">@MessageStrings.NoResults</span>'
            };

            function columnDefs(){
                return [
                     { headerName: '@ActionStrings.Action', field: "Id", width: 64, cellRenderer: actionCellRenderer },
                     { headerName: '@Html.DisplayNameFor(m => m.CompanyName)', field: "CompanyName", width: 300 },
                     { headerName: '@Html.DisplayNameFor(m => m.SupplierCode)', field: "SupplierCode", width: 160 },
                     { headerName: '@Html.DisplayNameFor(m => m.Capacity)', field: "Capacity", width: 90, cellClass: "text-right" },
                     { headerName: '@Html.DisplayNameFor(m => m.City)', field: "City", width: 112 },
                     { headerName: '@Html.DisplayNameFor(m => m.Country)', field: "Country", width: 112 },
                     { headerName: '@Html.DisplayNameFor(m => m.Discontinued)', field: "Discontinued", width: 112, cellRenderer: discontinueCellRenderer }
                ];
            }

            function actionCellRenderer(params) {
                var actions = '<div class="btn-group" style="margin-top:-3px;">' +
                    '<button type="button" title="@ActionStrings.Action" class="btn btn-xs btn-primary dropdown-toggle" data-toggle="dropdown" onclick="onActionMenuClick(this)">' +
                    '<span class="glyphicon glyphicon-tasks"></span> <span class="caret"></span>' +
                    '</button>' +
                    '<ul class="dropdown-menu mb15" role="menu">' +
                    '<li><a href="/Suppliers/Details/' + params.value + '">@ActionStrings.Details</a></li>' +
                @if (canUserEdit)
                {
                    @:'<li><a href="/Suppliers/Edit/' + params.value + '">@ActionStrings.Edit</a></li>' +
                }
                @if(canUserDelete)
                {
                    @:'<li><a href="#deleteConfirm" data-toggle="modal" onclick="setDelete(getObjectById(result.Items,' + params.value + ').CompanyName, ' + params.value + ');">@ActionStrings.Delete</a></li>' +
                }
                @if (canUserDiscontinue)
                {
                    @:(params.data.Discontinued ? '' : '<li class="divider"></li><li><a href="/Suppliers/Discontinue/' + params.value + '">@ActionStrings.Discontinue</a></li>') +
                }
                    '<li class="divider"></li>' +
                @if(canUserAddContact)
                {
                    @:'<li><a href="/Contacts/Create/?companyId=' + params.value + '">@EntityStrings.AddContact</a></li>' +
                }
                    '<li><a href="/Contacts/Index/?companyId=' + params.value + '">@EntityStrings.Contacts</a></li>' +
                @if(false && canUserAddContact)
                {
                    @:'<li class="divider"></li>' +
                    @:'<li><a href="/Manufacturers/Create/?supplierId=' + params.value + '">@EntityStrings.AddManufacturer</a></li>' +
                    @:'<li><a href="/Manufacturers/Index/?supplierId=' + params.value + '">@EntityStrings.Manufacturers</a></li>' +
                }
                '</ul></div>';

                return actions;
            }

            $.ajaxSetup({ cache: false });
            gridOptions = init.gridOptions;
            // angularGrid is a global function
            agGridGlobalFunc('#mainGrid', gridOptions);

            setPagerButtons($('#pagerUl'), result.Page, result.PageCount);
            displayRecordStats(result.Items.length, result.TotalCount);
        }

        function onActionMenuClick(menuBtn){
            setTimeout(function(){
                var menuHeight = 290;
                var rectMenu = menuBtn.getBoundingClientRect();
                var rectGrid = document.getElementById("mainGrid").getBoundingClientRect();

                var diffY = rectGrid.bottom - rectMenu.bottom - menuHeight;
                if (diffY < 0) {
                    var viewport = $('#mainGrid .ag-body-viewport');
                    var viewportScroll = viewport.scrollTop();
                    viewport.scrollTop((diffY * -1) + viewportScroll);
                }
            },250);
        }
        document.addEventListener("DOMContentLoaded", initPage());






        //Optional for grid pager
        var dataSource = {
            rowCount: result.TotalCount,
            pageSize: 10,
            getRows: function (params) {
                var pageNr = (params.startRow/10) + 1;
                var lastRow = pageNr * 10;
                var searchString = $('#SearchString').val();
                $.getJSON('/Suppliers/GetSupplierPagedList',
                    {
                        pageSize: 10,
                        page: pageNr,
                        searchString: searchString
                    },
                    function (suppliers) {
                        result = suppliers;
                        if(lastRow > result.TotalCount){
                            lastRow = result.TotalCount;
                        }
                        params.successCallback(result.Items, result.TotalCount);

                        //dataSource.rowCount = result.TotalCount;
                        //gridOptions.api.refreshView();
                    });
            }
        };
        //gridOptions.api.setDatasource(dataSource);
    </script>
}
