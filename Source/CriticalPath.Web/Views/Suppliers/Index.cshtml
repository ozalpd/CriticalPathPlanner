@using CriticalPath.Web.Models
@using CriticalPath.Data
@using CP.i8n
@model IEnumerable<Supplier>
@{
    ViewBag.Title = @EntityStrings.Suppliers;

    //Authorization Flags
    bool canUserEdit = ViewBag.canUserEdit;
    bool canUserCreate = ViewBag.canUserCreate;
    bool canUserDelete = ViewBag.canUserDelete;

    //Records & Pager
    int page = ViewBag.page;
    int totalCount = ViewBag.totalCount;
    int pageSize = ViewBag.pageSize;
    int pageCount = ViewBag.pageCount;
}
<div class="row well">
    <div class="col-md-8 col-sm-7">
        <h4>@EntityStrings.Suppliers</h4>
    </div>
    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "searchForm" }))
    {
        @Html.Hidden("page", page)
        <div class="col-md-4 col-sm-5">
            @Html.Partial("_SearchBoxPartial")
        </div>
    }
</div>
@if (totalCount > 0)
{
    <div id="suppliersGrid" class="ag-dark-blue ag-basic" style="width:948px;height:420px;"></div>
    @Html.Partial("_PagerPartial")
    if (canUserDelete)
    {
        @Html.Partial("_MessageBoxPartial")
    }
    @section scripts{
        @Scripts.Render("~/js/ag-grid")
        @Html.Partial("_IndexScriptsPartial", "Suppliers")
        <script type="text/javascript">
            var initSuppliersGrid = function() {
                var vm = this;
                vm.rowData = @Html.Raw(ViewBag.suppliers);
                vm.columnDefs = columnDefs();
                vm.gridOptions = {
                    columnDefs: vm.columnDefs,
                    rowHeight: 28,
                    headerHeight: 32,
                    rowData: vm.rowData
                };


                function columnDefs(){
                    return[
                         { headerName: '@ActionStrings.Action', field: "Id", width: 64, cellRenderer: actionCellRenderer},
                         { headerName: '@Html.DisplayNameFor(model => model.CompanyName)', field: "CompanyName", width: 300 },
                         { headerName: '@Html.DisplayNameFor(model => model.SupplierCode)', field: "SupplierCode", width: 160 },
                         { headerName: '@Html.DisplayNameFor(model => model.City)', field: "City" },
                         { headerName: '@Html.DisplayNameFor(model => model.Country)', field: "Country" }
                    ];
                }

                var True = true;
                var False = false;
                var canUserDelete = @canUserDelete;
                var canUserEdit = @canUserEdit;
                var canUserAddContact = @canUserCreate;

                function actionCellRenderer(params) {
                    var actions = '<div class="btn-group">' +
                        '<button type="button" title="@ActionStrings.Action" class="btn btn-xs btn-default dropdown-toggle" data-toggle="dropdown" onclick="onActionClicked(this)">' +
                        '<span class="glyphicon glyphicon-tasks"></span> <span class="caret"></span>' +
                        '</button>' +
                        '<ul class="dropdown-menu" role="menu">' +
                        '<li><a href="/Suppliers/Details/' + params.value + '">@ActionStrings.Details</a></li>';
                    if(canUserDelete){
                        actions = actions + '<li><a href="/Suppliers/Edit/' + params.value + '">@ActionStrings.Edit</a></li>';
                    }
                    if(canUserDelete){
                        actions = actions + '<li><a href="#deleteConfirm" data-toggle="modal" onclick="setDelete(\'Dnm\', '
                            + params.value + ');">@ActionStrings.Delete</a></li>';
                    }
                    actions = actions + '<li class="divider"></li>';
                    if(canUserAddContact){
                        actions = actions + '<li><a href="/Contacts/Create/?companyId=' + params.value + '">@EntityStrings.AddContact</a></li>';
                    }
                    actions = actions + '<li><a href="/Contacts/Index/?companyId=' + params.value + '">@EntityStrings.Contacts</a></li>';
                    actions = actions + '</ul></div>';

                    return actions;
                }

                // angularGrid is a global function
                agGridGlobalFunc('#suppliersGrid', vm.gridOptions);
                return vm;
            }

            function onActionClicked(menuBtn){
                var menuHeight = 180;
                var rectMenu = menuBtn.getBoundingClientRect();
                var rectGrid = document.getElementById("suppliersGrid").getBoundingClientRect();

                var diffY = rectGrid.bottom - rectMenu.bottom - menuHeight;
                if (diffY < 0) {
                    setTimeout(function(){
                        $('#suppliersGrid .ag-body-viewport').scrollTop(diffY * -1);
                        //document.getElementById("dnm").innerHTML = diffY;
                    },250);
                }
            }

            document.addEventListener("DOMContentLoaded", initSuppliersGrid());
        </script>
    }
}
else
{
    <h4>@MessageStrings.NoResults!</h4>
}