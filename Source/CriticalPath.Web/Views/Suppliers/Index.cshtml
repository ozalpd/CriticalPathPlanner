@using CriticalPath.Web.Controllers
@using CriticalPath.Web.Models
@using CriticalPath.Data
@using CP.i8n
@model IEnumerable<Supplier>
@{
    ViewBag.Title = @EntityStrings.Suppliers;

    //Authorization Flags
    bool canUserEdit = ViewBag.canUserEdit;
    bool canUserCreate = ViewBag.canUserCreate;
    bool canUserDelete = ViewBag.canUserDelete;

    //Records & Pager
    int page = ViewBag.page;
    int totalCount = ViewBag.totalCount;
}
<div class="row well">
    <div class="col-md-8 col-sm-7">
        <h4>@EntityStrings.Suppliers</h4>
    </div>
    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "searchForm" }))
    {
        @Html.Hidden("page", page)
        <div class="col-md-4 col-sm-5">
            @Html.Partial("_SearchBoxPartial")
        </div>
    }
</div>
@if (totalCount > 0)
{
    <div id="suppliersGrid" class="ag-dark-blue ag-basic" style="width:948px;height:400px;"></div>
    <div class="row pl15" style="margin-top:-64px;z-index:500;position:absolute;">
        <nav><ul id="pagerUl" class="pagination"></ul></nav>
    </div>
    if (canUserDelete)
    {
        @Html.Partial("_MessageBoxPartial")
    }
    @section scripts{
        @Scripts.Render("~/js/ag-grid")
        @Html.Partial("_IndexScriptsPartial", "Suppliers")
        <script type="text/javascript">
            var result = @Html.Raw(ViewBag.result);
            var gridOptions;

            var initSuppliersGrid = function() {
                var vm = this;
                vm.columnDefs = columnDefs();
                vm.gridOptions = {
                    columnDefs: vm.columnDefs,
                    rowHeight: 26,
                    pageSize: result.pageSize,
                    headerHeight: 32,
                    rowData: result.Items
                };

                function columnDefs(){
                    return[
                         { headerName: '@ActionStrings.Action', field: "Id", width: 64, cellRenderer: actionCellRenderer},
                         { headerName: '@Html.DisplayNameFor(model => model.CompanyName)', field: "CompanyName", width: 300 },
                         { headerName: '@Html.DisplayNameFor(model => model.SupplierCode)', field: "SupplierCode", width: 160 },
                         { headerName: '@Html.DisplayNameFor(model => model.City)', field: "City" },
                         { headerName: '@Html.DisplayNameFor(model => model.Country)', field: "Country" }
                    ];
                }

                function actionCellRenderer(params) {
                    var actions = '<div class="btn-group">' +
                        '<button type="button" title="@ActionStrings.Action" class="btn btn-xs btn-default dropdown-toggle" data-toggle="dropdown" onclick="onActionClicked(this)">' +
                        '<span class="glyphicon glyphicon-tasks"></span> <span class="caret"></span>' +
                        '</button>' +
                        '<ul class="dropdown-menu mb15" role="menu">' +
                        '<li><a href="/Suppliers/Details/' + params.value + '">@ActionStrings.Details</a></li>' +
                    @if (canUserEdit)
                    {
                        @:'<li><a href="/Suppliers/Edit/' + params.value + '">@ActionStrings.Edit</a></li>' +
                    }
                    @if(canUserDelete)
                    {
                        @:'<li><a href="#deleteConfirm" data-toggle="modal" onclick="setDelete(getObjectById(result.Items,' + params.value + ').CompanyName, ' + params.value + ');">@ActionStrings.Delete</a></li>' +
                    }
                        '<li class="divider"></li>' +
                    @if(canUserCreate)
                    {
                        @:'<li><a href="/Contacts/Create/?companyId=' + params.value + '">@EntityStrings.AddContact</a></li>' +
                    }
                        '<li><a href="/Contacts/Index/?companyId=' + params.value + '">@EntityStrings.Contacts</a></li>' +
                        '</ul></div>';

                    return actions;
                }

                // angularGrid is a global function
                agGridGlobalFunc('#suppliersGrid', vm.gridOptions);
                gridOptions = vm.gridOptions;
            }

            function setPager(page) {
                var searchString = $('#SearchString').val();
                var url = '/Suppliers/GetSupplierPagedList';
                showMessageBox('Loading...', '<span class="fontSize200pc">Data Loading...</span>');
                $.getJSON(url, {
                    pageSize: result.PageSize,
                    page: page,
                    searchString: searchString
                },
                    function (suppliers) {
                        result = suppliers;
                        gridOptions.api.setRowData(result.Items);
                        setPagerButtons($('#pagerUl'), result.Page, result.PageCount);
                        displayRecordStats(result.Items.length, result.TotalCount);
                        hideMessageBox();
                    }).fail(function(jqXHR, textStatus, errorThrown){
                        var msgboxMsg = jqXHR.responseText;
                        showMessageBox(textStatus, msgboxMsg, true);
                    }).always(function(jqXHR){
                        
                    });
            }

            function onActionClicked(menuBtn){
                setTimeout(function(){
                    var menuHeight = 196;
                    var rectMenu = menuBtn.getBoundingClientRect();
                    var rectGrid = document.getElementById("suppliersGrid").getBoundingClientRect();

                    var diffY = rectGrid.bottom - rectMenu.bottom - menuHeight;
                    if (diffY < 0) {
                        var viewport = $('#suppliersGrid .ag-body-viewport');
                        var viewportScroll = viewport.scrollTop();
                        viewport.scrollTop((diffY * -1) + viewportScroll);
                    }
                },250);
            }

            document.addEventListener("DOMContentLoaded", initSuppliersGrid());
            setPagerButtons($('#pagerUl'), result.Page, result.PageCount);
            displayRecordStats(result.Items.length, result.TotalCount);




            
            //Optional for grid pager
            var dataSource = {
                rowCount: result.TotalCount,
                pageSize: 10,
                getRows: function (params) {
                    var pageNr = (params.startRow/10) + 1;
                    var lastRow = pageNr * 10;
                    var searchString = $('#SearchString').val();
                    $.getJSON('/Suppliers/GetSupplierPagedList',
                        {
                            pageSize: 10,
                            page: pageNr,
                            searchString: searchString
                        },
                        function (suppliers) {
                            result = suppliers;
                            if(lastRow > result.TotalCount){
                                lastRow = result.TotalCount;
                            }
                            params.successCallback(result.Items, result.TotalCount);

                            //dataSource.rowCount = result.TotalCount;
                            //gridOptions.api.refreshView();
                        });
                }
            };
            //gridOptions.api.setDatasource(dataSource);
        </script>
    }
}
else
{
    <h4>@MessageStrings.NoResults!</h4>
}