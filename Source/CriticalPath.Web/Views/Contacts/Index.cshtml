@using CriticalPath.Web.Models
@using CriticalPath.Data
@using CP.i8n
@model IEnumerable<Contact>
@{
    ViewBag.Title = @EntityStrings.Contacts;

    //Authorization Flags
    bool canUserEdit = ViewBag.canUserEdit;
    bool canUserCreate = ViewBag.canUserCreate;
    bool canUserDelete = ViewBag.canUserDelete;
    bool canSeeRestricted = ViewBag.canSeeRestricted;

    //Records & Pager
    int page = ViewBag.page;
    int totalCount = ViewBag.totalCount;
    int pageSize = ViewBag.pageSize;
    int pageCount = ViewBag.pageCount;

    var title = EntityStrings.Contacts;
}
<div class="well hidden-print">
    <div class="row">
        <div class="col-md-6 col-sm-5">
            <h4>@title</h4>
        </div>
        <div class="col-sm-2">
            @*@Html.ActionLink(ActionStrings.AddNew, "Create", null, new { @class = "btn btn-primary", input_modal = EntityStrings.AddNewContact })*@
        </div>
        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "searchForm" }))
        {
            @Html.Hidden("page", page)
            @Html.Hidden("pageSize", pageSize)
            <div class="col-md-4 col-sm-5">
                @Html.Partial("_SearchBoxPartial")
            </div>
        }
    </div>
</div>
@if (totalCount > 0)
{
    <div id="contactGridParent" class="table-responsive">
        <table id="contactGrid" class="table table-striped table-bordered table-hover">
            <tr>
                <th class="hidden-print" width="20px">@ActionStrings.Action</th>
                <th>@Html.DisplayNameFor(model => model.FirstName)</th>
                <th>@Html.DisplayNameFor(model => model.LastName)</th>
                <th>@Html.DisplayNameFor(model => model.Company)</th>
                <th>@CommonStrings.Email</th>
            </tr>
            @foreach (var item in Model)
            {
                <tr>
                    <td class="hidden-print">
                        <div class="btn-group">
                            <button type="button" title="@ActionStrings.Action" class="btn btn-xs btn-default dropdown-toggle" data-toggle="dropdown" onclick='onActionMenuClick(this)'>
                                <span class="glyphicon glyphicon-tasks"></span> <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu" role="menu">
                                <li>@Html.ActionLink(ActionStrings.Details, "Details", new { id = item.Id }, new { input_modal = ActionStrings.Details })</li>
                                @if (canUserEdit)
                                {
                                    <li>@Html.ActionLink(ActionStrings.Edit, "Edit", new { id = item.Id }, new { input_modal = EntityStrings.EditContact })</li>
                                }
                                @if (canUserDelete)
                                {
                                    <li>
                                        <a href="#deleteConfirm" data-toggle="modal" onclick="setDelete('<b>@Html.Encode(item.FullName)</b>', @item.Id);">
                                            @ActionStrings.Delete
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </td>
                    <td>@Html.DisplayFor(modelItem => item.FirstName)</td>
                    <td>@Html.DisplayFor(modelItem => item.LastName)</td>
                    <td>@Html.DisplayFor(modelItem => item.Company)</td>
                    <td>
                        @Html.DisplayFor(modelItem => item.EmailWork)
                        @if (!(string.IsNullOrEmpty(item.EmailHome) || string.IsNullOrEmpty(item.EmailWork)))
                        {
                            <br />
                        }
                        @Html.DisplayFor(modelItem => item.EmailHome)
                    </td>
                </tr>
            }
        </table>
    </div>
}
else
{
    <h4>@MessageStrings.NoResults!</h4>
}
@Html.Partial("_PagerPartial")
@Html.Partial("_MessageBoxPartial")
@section scripts{
    @Scripts.Render("~/bundles/jqueryval")
    @Html.Partial("_IndexScriptsPartial", "Contacts") @* Controller's name *@
    <script type="text/javascript">
        (function () {
            $.ajaxSetup({
                cache: false
            });
            setActionLinks();
        }());
        function setActionLinks() {
            $('a[input-modal]').on('click', function (params) {
                if (params.ctrlKey || params.metaKey || params.altKey) {
                    return true;
                }
                showMessageBox('@MessageStrings.Loading...', '@MessageStrings.PleaseWait.', false);
                var title = $(this).attr("input-modal");
                var url = this.href;
                url += (url.indexOf('?') == -1) ? '?' : '&';
                url += 'modal=true';
                $('#dataInputBody').load(url, function () {
                    hideMessageBox();
                    if (title != null || title != '') {
                        $('#dataInputTitle').html(title);
                    }
                    var inputForm = document.getElementById('dataInputForm');
                    if (isNaN(inputForm)) {
                        $('#dataInputFooter').show();
                    }
                    else {
                        $('#dataInputFooter').hide();
                    }
                    $('#dataInputModal').modal('show');
                });
                return false;
            });
        }
        function onActionMenuClick(menuBtn) {
            setTimeout(function () {
                var menuHeight = 160;
                var rectMenu = menuBtn.getBoundingClientRect();
                var rectGrid = document.getElementById("contactGrid").getBoundingClientRect();
                var diffY = rectGrid.bottom - rectMenu.bottom - menuHeight;

                if (diffY < 0) {
                    var viewport = $('#contactGridParent');
                    var viewportScroll = viewport.scrollTop();
                    viewport.scrollTop((diffY * -1) + viewportScroll);
                }
            }, 250);
        }
    </script>
}