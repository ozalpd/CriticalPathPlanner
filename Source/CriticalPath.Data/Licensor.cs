//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CriticalPath.Data
{
    using System;
    using System.Collections.Generic;
    
    public partial class Licensor : Company
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Licensor()
        {
            this.PurchaseOrders = new HashSet<PurchaseOrder>();
        }
    
        public string LicensorCode { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PurchaseOrder> PurchaseOrders { get; set; }
    	/// <summary>
    	/// Clones all properties in a new Licensor instance,
    	/// except PrimaryKey(s)
    	/// </summary>
    	/// <returns>New Licensor instance</returns>
        public Licensor Clone()
        {
            var clone = new Licensor();
            clone.CompanyName = CompanyName;
            clone.Phone1 = Phone1;
            clone.Phone2 = Phone2;
            clone.Phone3 = Phone3;
            clone.Address1 = Address1;
            clone.Address2 = Address2;
            clone.ZipCode = ZipCode;
            clone.City = City;
            clone.State = State;
            clone.CountryId = CountryId;
            clone.Discontinued = Discontinued;
            clone.DiscontinueDate = DiscontinueDate;
            clone.DiscontinueNotes = DiscontinueNotes;
            clone.Notes = Notes;
            clone.ModifyNr = ModifyNr;
            clone.ModifyDate = ModifyDate;
            clone.DiscontinuedUserId = DiscontinuedUserId;
            clone.DiscontinuedUserIp = DiscontinuedUserIp;
            clone.ModifierId = ModifierId;
            clone.ModifierIp = ModifierIp;
            clone.CreateDate = CreateDate;
            clone.CreatorId = CreatorId;
            clone.CreatorIp = CreatorIp;
            clone.LicensorCode = LicensorCode;
    
            Cloning(clone);
    
            return clone;
        }
    
    	// Use below function in a partial class file (eg. Licensor.part.cs)
    	// to add more complexity to clone
        partial void Cloning(Licensor clone);
    }
    
    //Data Transfer Object type for Licensor
    public partial class LicensorDTO
    {
        public LicensorDTO() { }
    
        public LicensorDTO(Licensor entity)
        {
            Id = entity.Id;
            CompanyName = entity.CompanyName;
            Phone1 = entity.Phone1;
            Phone2 = entity.Phone2;
            Phone3 = entity.Phone3;
            Address1 = entity.Address1;
            Address2 = entity.Address2;
            ZipCode = entity.ZipCode;
            City = entity.City;
            State = entity.State;
            CountryId = entity.CountryId;
            Discontinued = entity.Discontinued;
            DiscontinueDate = entity.DiscontinueDate;
            DiscontinueNotes = entity.DiscontinueNotes;
            Notes = entity.Notes;
            LicensorCode = entity.LicensorCode;
        
            Initiliazing(entity);
        }
    
        partial void Initiliazing(Licensor entity);
        
        public virtual Licensor ToLicensor()
        {
            var entity = new Licensor();
            entity.Id = Id;
            entity.CompanyName = CompanyName;
            entity.Phone1 = Phone1;
            entity.Phone2 = Phone2;
            entity.Phone3 = Phone3;
            entity.Address1 = Address1;
            entity.Address2 = Address2;
            entity.ZipCode = ZipCode;
            entity.City = City;
            entity.State = State;
            entity.CountryId = CountryId;
            entity.Discontinued = Discontinued;
            entity.DiscontinueDate = DiscontinueDate;
            entity.DiscontinueNotes = DiscontinueNotes;
            entity.Notes = Notes;
            entity.LicensorCode = LicensorCode;
    
            Converting(entity);
    
            return entity;
        }
    
        partial void Converting(Licensor entity);
      
        public int Id { get; set; }
        public string CompanyName { get; set; }
        public string Phone1 { get; set; }
        public string Phone2 { get; set; }
        public string Phone3 { get; set; }
        public string Address1 { get; set; }
        public string Address2 { get; set; }
        public string ZipCode { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public int CountryId { get; set; }
        public bool Discontinued { get; set; }
        public Nullable<System.DateTime> DiscontinueDate { get; set; }
        public string DiscontinueNotes { get; set; }
        public string Notes { get; set; }
        public string LicensorCode { get; set; }
    }
}
