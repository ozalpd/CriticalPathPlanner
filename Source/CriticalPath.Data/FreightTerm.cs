//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CriticalPath.Data
{
    using System;
    using System.Collections.Generic;
    
    public partial class FreightTerm
    {
        public int Id { get; set; }
        public string IncotermCode { get; set; }
        public string Description { get; set; }
        public bool IsPublished { get; set; }
    	/// <summary>
    	/// Clones all properties in a new FreightTerm instance,
    	/// except PrimaryKey(s)
    	/// </summary>
    	/// <returns>New FreightTerm instance</returns>
        public FreightTerm Clone()
        {
            var clone = new FreightTerm();
            clone.IncotermCode = IncotermCode;
            clone.Description = Description;
            clone.IsPublished = IsPublished;
    
            Cloning(clone);
    
            return clone;
        }
    
    	// Use below function in a partial class file (eg. FreightTerm.part.cs)
    	// to add more complexity to clone
        partial void Cloning(FreightTerm clone);
    }
    
    //Data Transfer Object type for FreightTerm
    public partial class FreightTermDTO
    {
        public FreightTermDTO() { }
    
        public FreightTermDTO(FreightTerm entity)
        {
            Id = entity.Id;
            IncotermCode = entity.IncotermCode;
            Description = entity.Description;
        
            Initiliazing(entity);
        }
    
        partial void Initiliazing(FreightTerm entity);
        
        public virtual FreightTerm ToFreightTerm()
        {
            var entity = new FreightTerm();
            entity.Id = Id;
            entity.IncotermCode = IncotermCode;
            entity.Description = Description;
    
            Converting(entity);
    
            return entity;
        }
    
        partial void Converting(FreightTerm entity);
      
        public int Id { get; set; }
        public string IncotermCode { get; set; }
        public string Description { get; set; }
    }
}
