//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CriticalPath.Data
{
    using System;
    using System.Linq;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    public partial class CriticalPathContext : AbstractCriticalPathContext
    {
        
    }
    
    public abstract partial class AbstractCriticalPathContext : DbContext
    {
        public AbstractCriticalPathContext()
            : base("name=CriticalPathContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<Process> Processes { get; set; }
        public virtual DbSet<ProcessStep> ProcessSteps { get; set; }
        public virtual DbSet<ProcessStepTemplate> ProcessStepTemplates { get; set; }
        public virtual DbSet<ProcessTemplate> ProcessTemplates { get; set; }
        public virtual DbSet<POSizeRatio> POSizeRatios { get; set; }
        public virtual DbSet<SizingStandard> SizingStandards { get; set; }
        public virtual DbSet<Sizing> Sizings { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<FreightTerm> FreightTerms { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<CustomerDepartment> CustomerDepartments { get; set; }
        public virtual DbSet<ProcessStepRevision> ProcessStepRevisions { get; set; }
        public virtual DbSet<EmployeePosition> EmployeePositions { get; set; }
        public virtual DbSet<POAttachment> POAttachments { get; set; }
        public virtual DbSet<POImage> POImages { get; set; }
        public virtual DbSet<POShipment> POShipments { get; set; }
    
        /// <summary>
        /// Default query for AspNetUsers
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<AspNetUser> GetAspNetUserQuery()
        {
            IQueryable<AspNetUser> query = AspNetUsers.OrderBy(p => p.LastName);
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from AspNetUser query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<AspNetUserDTO> GetAspNetUserDtoQuery()
        {
            return GetAspNetUserDtoQuery(GetAspNetUserQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from AspNetUser query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<AspNetUserDTO> GetAspNetUserDtoQuery(IQueryable<AspNetUser> query)
        {
            return from e in query
                   select new AspNetUserDTO
                   {
                       Id = e.Id,
                       FirstName = e.FirstName,
                       LastName = e.LastName,
                       Email = e.Email,
                       EmailConfirmed = e.EmailConfirmed,
                       PasswordHash = e.PasswordHash,
                       SecurityStamp = e.SecurityStamp,
                       PhoneNumber = e.PhoneNumber,
                       PhoneNumberConfirmed = e.PhoneNumberConfirmed,
                       TwoFactorEnabled = e.TwoFactorEnabled,
                       LockoutEndDateUtc = e.LockoutEndDateUtc,
                       LockoutEnabled = e.LockoutEnabled,
                       AccessFailedCount = e.AccessFailedCount,
                       UserName = e.UserName,
                   };
        }
    
    
        /// <summary>
        /// Default query for Companies
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<Customer> GetCustomerQuery()
        {
            IQueryable<Customer> query = Companies.OrderBy(p => p.CompanyName)
    														.OfType<Customer>();
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Customer query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<CustomerDTO> GetCustomerDtoQuery()
        {
            return GetCustomerDtoQuery(GetCustomerQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Customer query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<CustomerDTO> GetCustomerDtoQuery(IQueryable<Customer> query)
        {
            return from e in query
                   select new CustomerDTO
                   {
                       Id = e.Id,
                       CompanyName = e.CompanyName,
                       Phone1 = e.Phone1,
                       Phone2 = e.Phone2,
                       Phone3 = e.Phone3,
                       Address1 = e.Address1,
                       Address2 = e.Address2,
                       ZipCode = e.ZipCode,
                       City = e.City,
                       State = e.State,
                       CountryId = e.CountryId,
                       Discontinued = e.Discontinued,
                       DiscontinueDate = e.DiscontinueDate,
                       DiscontinueNotes = e.DiscontinueNotes,
                       Notes = e.Notes,
                       CustomerCode = e.CustomerCode,
                       DiscountRate = e.DiscountRate,
                   };
        }
    
    
        /// <summary>
        /// Default query for Companies
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<Licensor> GetLicensorQuery()
        {
            IQueryable<Licensor> query = Companies.OrderBy(p => p.CompanyName)
    														.OfType<Licensor>();
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Licensor query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<LicensorDTO> GetLicensorDtoQuery()
        {
            return GetLicensorDtoQuery(GetLicensorQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Licensor query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<LicensorDTO> GetLicensorDtoQuery(IQueryable<Licensor> query)
        {
            return from e in query
                   select new LicensorDTO
                   {
                       Id = e.Id,
                       CompanyName = e.CompanyName,
                       Phone1 = e.Phone1,
                       Phone2 = e.Phone2,
                       Phone3 = e.Phone3,
                       Address1 = e.Address1,
                       Address2 = e.Address2,
                       ZipCode = e.ZipCode,
                       City = e.City,
                       State = e.State,
                       CountryId = e.CountryId,
                       Discontinued = e.Discontinued,
                       DiscontinueDate = e.DiscontinueDate,
                       DiscontinueNotes = e.DiscontinueNotes,
                       Notes = e.Notes,
                       LicensorCode = e.LicensorCode,
                   };
        }
    
    
        /// <summary>
        /// Default query for Companies
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<Manufacturer> GetManufacturerQuery()
        {
            IQueryable<Manufacturer> query = Companies.OrderBy(p => p.CompanyName)
    														.OfType<Manufacturer>();
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Manufacturer query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ManufacturerDTO> GetManufacturerDtoQuery()
        {
            return GetManufacturerDtoQuery(GetManufacturerQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Manufacturer query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ManufacturerDTO> GetManufacturerDtoQuery(IQueryable<Manufacturer> query)
        {
            return from e in query
                   select new ManufacturerDTO
                   {
                       Id = e.Id,
                       CompanyName = e.CompanyName,
                       Phone1 = e.Phone1,
                       Phone2 = e.Phone2,
                       Phone3 = e.Phone3,
                       Address1 = e.Address1,
                       Address2 = e.Address2,
                       ZipCode = e.ZipCode,
                       City = e.City,
                       State = e.State,
                       CountryId = e.CountryId,
                       Discontinued = e.Discontinued,
                       DiscontinueDate = e.DiscontinueDate,
                       DiscontinueNotes = e.DiscontinueNotes,
                       Notes = e.Notes,
                       ManufacturerCode = e.ManufacturerCode,
                       Capacity = e.Capacity,
                       SupplierId = e.SupplierId,
                   };
        }
    
    
        /// <summary>
        /// Default query for Companies
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<Supplier> GetSupplierQuery()
        {
            IQueryable<Supplier> query = Companies.OrderBy(p => p.CompanyName)
    														.OfType<Supplier>();
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Supplier query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<SupplierDTO> GetSupplierDtoQuery()
        {
            return GetSupplierDtoQuery(GetSupplierQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Supplier query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<SupplierDTO> GetSupplierDtoQuery(IQueryable<Supplier> query)
        {
            return from e in query
                   select new SupplierDTO
                   {
                       Id = e.Id,
                       CompanyName = e.CompanyName,
                       Phone1 = e.Phone1,
                       Phone2 = e.Phone2,
                       Phone3 = e.Phone3,
                       Address1 = e.Address1,
                       Address2 = e.Address2,
                       ZipCode = e.ZipCode,
                       City = e.City,
                       State = e.State,
                       CountryId = e.CountryId,
                       Discontinued = e.Discontinued,
                       DiscontinueDate = e.DiscontinueDate,
                       DiscontinueNotes = e.DiscontinueNotes,
                       Notes = e.Notes,
                       SupplierCode = e.SupplierCode,
                       Capacity = e.Capacity,
                   };
        }
    
    
        /// <summary>
        /// Default query for Contacts
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<Contact> GetContactQuery()
        {
            IQueryable<Contact> query = Contacts.OrderBy(p => p.LastName);
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Contact query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ContactDTO> GetContactDtoQuery()
        {
            return GetContactDtoQuery(GetContactQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Contact query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ContactDTO> GetContactDtoQuery(IQueryable<Contact> query)
        {
            return from e in query
                   select new ContactDTO
                   {
                       Id = e.Id,
                       CompanyId = e.CompanyId,
                       FirstName = e.FirstName,
                       LastName = e.LastName,
                       EmailWork = e.EmailWork,
                       EmailHome = e.EmailHome,
                       PhoneMobile = e.PhoneMobile,
                       PhoneWork1 = e.PhoneWork1,
                       PhoneWork2 = e.PhoneWork2,
                       Discontinued = e.Discontinued,
                       DiscontinueDate = e.DiscontinueDate,
                       DiscontinueNotes = e.DiscontinueNotes,
                       Notes = e.Notes,
                   };
        }
    
    
        /// <summary>
        /// Default query for Countries
        /// </summary>
        /// <param name="publishedOnly">Sets query IsPublished == true</param>
        /// <returns></returns>
        public virtual IQueryable<Country> GetCountryQuery(bool publishedOnly = true)
        {
            IQueryable<Country> query = Countries.OrderBy(p => p.DisplayOrder);
            if (publishedOnly)
            {
                query = query.Where(e => e.IsPublished);
            }
    
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Country query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<CountryDTO> GetCountryDtoQuery(bool publishedOnly = true)
        {
            return GetCountryDtoQuery(GetCountryQuery(publishedOnly));
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Country query
        /// </summary>
        /// <param name="publishedOnly">Sets query IsPublished == true</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<CountryDTO> GetCountryDtoQuery(IQueryable<Country> query)
        {
            return from e in query
                   select new CountryDTO
                   {
                       Id = e.Id,
                       CountryName = e.CountryName,
                       TwoLetterIsoCode = e.TwoLetterIsoCode,
                       ThreeLetterIsoCode = e.ThreeLetterIsoCode,
                       NumericIsoCode = e.NumericIsoCode,
                       DisplayOrder = e.DisplayOrder,
                   };
        }
    
    
        /// <summary>
        /// Default query for Currencies
        /// </summary>
        /// <param name="publishedOnly">Sets query IsPublished == true</param>
        /// <returns></returns>
        public virtual IQueryable<Currency> GetCurrencyQuery(bool publishedOnly = true)
        {
            IQueryable<Currency> query = Currencies;
            if (publishedOnly)
            {
                query = query.Where(e => e.IsPublished);
            }
    
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Currency query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<CurrencyDTO> GetCurrencyDtoQuery(bool publishedOnly = true)
        {
            return GetCurrencyDtoQuery(GetCurrencyQuery(publishedOnly));
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Currency query
        /// </summary>
        /// <param name="publishedOnly">Sets query IsPublished == true</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<CurrencyDTO> GetCurrencyDtoQuery(IQueryable<Currency> query)
        {
            return from e in query
                   select new CurrencyDTO
                   {
                       Id = e.Id,
                       CurrencyName = e.CurrencyName,
                       CurrencyCode = e.CurrencyCode,
                       CurrencySymbol = e.CurrencySymbol,
                   };
        }
    
    
        /// <summary>
        /// Default query for CustomerDepartments
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<CustomerDepartment> GetCustomerDepartmentQuery()
        {
            IQueryable<CustomerDepartment> query = CustomerDepartments.OrderBy(p => p.DepartmentName);
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from CustomerDepartment query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<CustomerDepartmentDTO> GetCustomerDepartmentDtoQuery()
        {
            return GetCustomerDepartmentDtoQuery(GetCustomerDepartmentQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from CustomerDepartment query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<CustomerDepartmentDTO> GetCustomerDepartmentDtoQuery(IQueryable<CustomerDepartment> query)
        {
            return from e in query
                   select new CustomerDepartmentDTO
                   {
                       Id = e.Id,
                       DepartmentName = e.DepartmentName,
                       CustomerId = e.CustomerId,
                   };
        }
    
    
        /// <summary>
        /// Default query for EmployeePositions
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<EmployeePosition> GetEmployeePositionQuery()
        {
            IQueryable<EmployeePosition> query = EmployeePositions;
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from EmployeePosition query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<EmployeePositionDTO> GetEmployeePositionDtoQuery()
        {
            return GetEmployeePositionDtoQuery(GetEmployeePositionQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from EmployeePosition query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<EmployeePositionDTO> GetEmployeePositionDtoQuery(IQueryable<EmployeePosition> query)
        {
            return from e in query
                   select new EmployeePositionDTO
                   {
                       Id = e.Id,
                       Position = e.Position,
                       AppDefault = e.AppDefault,
                   };
        }
    
    
        /// <summary>
        /// Default query for Employees
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<Employee> GetEmployeeQuery()
        {
            IQueryable<Employee> query = Employees;
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Employee query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<EmployeeDTO> GetEmployeeDtoQuery()
        {
            return GetEmployeeDtoQuery(GetEmployeeQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Employee query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<EmployeeDTO> GetEmployeeDtoQuery(IQueryable<Employee> query)
        {
            return from e in query
                   select new EmployeeDTO
                   {
                       Id = e.Id,
                       IsActive = e.IsActive,
                       PositionId = e.PositionId,
                       InactivateDate = e.InactivateDate,
                   };
        }
    
    
        /// <summary>
        /// Default query for FreightTerms
        /// </summary>
        /// <param name="publishedOnly">Sets query IsPublished == true</param>
        /// <returns></returns>
        public virtual IQueryable<FreightTerm> GetFreightTermQuery(bool publishedOnly = true)
        {
            IQueryable<FreightTerm> query = FreightTerms;
            if (publishedOnly)
            {
                query = query.Where(e => e.IsPublished);
            }
    
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from FreightTerm query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<FreightTermDTO> GetFreightTermDtoQuery(bool publishedOnly = true)
        {
            return GetFreightTermDtoQuery(GetFreightTermQuery(publishedOnly));
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from FreightTerm query
        /// </summary>
        /// <param name="publishedOnly">Sets query IsPublished == true</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<FreightTermDTO> GetFreightTermDtoQuery(IQueryable<FreightTerm> query)
        {
            return from e in query
                   select new FreightTermDTO
                   {
                       Id = e.Id,
                       IncotermCode = e.IncotermCode,
                       Description = e.Description,
                   };
        }
    
    
        /// <summary>
        /// Default query for POAttachments
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<POAttachment> GetPOAttachmentQuery()
        {
            IQueryable<POAttachment> query = POAttachments.OrderBy(p => p.DisplayOrder);
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from POAttachment query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<POAttachmentDTO> GetPOAttachmentDtoQuery()
        {
            return GetPOAttachmentDtoQuery(GetPOAttachmentQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from POAttachment query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<POAttachmentDTO> GetPOAttachmentDtoQuery(IQueryable<POAttachment> query)
        {
            return from e in query
                   select new POAttachmentDTO
                   {
                       Id = e.Id,
                       PurchaseOrderId = e.PurchaseOrderId,
                       FileUrl = e.FileUrl,
                       FileTitle = e.FileTitle,
                       FileName = e.FileName,
                       FileType = e.FileType,
                       DisplayOrder = e.DisplayOrder,
                   };
        }
    
    
        /// <summary>
        /// Default query for POImages
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<POImage> GetPOImageQuery()
        {
            IQueryable<POImage> query = POImages.OrderBy(p => p.DisplayOrder);
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from POImage query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<POImageDTO> GetPOImageDtoQuery()
        {
            return GetPOImageDtoQuery(GetPOImageQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from POImage query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<POImageDTO> GetPOImageDtoQuery(IQueryable<POImage> query)
        {
            return from e in query
                   select new POImageDTO
                   {
                       Id = e.Id,
                       PurchaseOrderId = e.PurchaseOrderId,
                       ImageUrl = e.ImageUrl,
                       ImageTitle = e.ImageTitle,
                       DisplayOrder = e.DisplayOrder,
                   };
        }
    
    
        /// <summary>
        /// Default query for POShipments
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<POShipment> GetPOShipmentQuery()
        {
            IQueryable<POShipment> query = POShipments;
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from POShipment query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<POShipmentDTO> GetPOShipmentDtoQuery()
        {
            return GetPOShipmentDtoQuery(GetPOShipmentQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from POShipment query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<POShipmentDTO> GetPOShipmentDtoQuery(IQueryable<POShipment> query)
        {
            return from e in query
                   select new POShipmentDTO
                   {
                       Id = e.Id,
                       ShippingNr = e.ShippingNr,
                       ShippingDate = e.ShippingDate,
                       DeliveryNr = e.DeliveryNr,
                       DeliveryDate = e.DeliveryDate,
                       DestinationNr = e.DestinationNr,
                       RefCode = e.RefCode,
                       CustomerRefNr = e.CustomerRefNr,
                       Quantity = e.Quantity,
                       IsShipped = e.IsShipped,
                       IsDelivered = e.IsDelivered,
                       PurchaseOrderId = e.PurchaseOrderId,
                       FreightTermId = e.FreightTermId,
                   };
        }
    
    
        /// <summary>
        /// Default query for POSizeRatios
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<POSizeRatio> GetPOSizeRatioQuery()
        {
            IQueryable<POSizeRatio> query = POSizeRatios.OrderBy(p => p.DisplayOrder);
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from POSizeRatio query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<POSizeRatioDTO> GetPOSizeRatioDtoQuery()
        {
            return GetPOSizeRatioDtoQuery(GetPOSizeRatioQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from POSizeRatio query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<POSizeRatioDTO> GetPOSizeRatioDtoQuery(IQueryable<POSizeRatio> query)
        {
            return from e in query
                   select new POSizeRatioDTO
                   {
                       Id = e.Id,
                       DisplayOrder = e.DisplayOrder,
                       Caption = e.Caption,
                       Rate = e.Rate,
                       PurchaseOrderId = e.PurchaseOrderId,
                   };
        }
    
    
        /// <summary>
        /// Default query for Processes
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<Process> GetProcessQuery()
        {
            IQueryable<Process> query = Processes;
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Process query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProcessDTO> GetProcessDtoQuery()
        {
            return GetProcessDtoQuery(GetProcessQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Process query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProcessDTO> GetProcessDtoQuery(IQueryable<Process> query)
        {
            return from e in query
                   select new ProcessDTO
                   {
                       Id = e.Id,
                       IsCompleted = e.IsCompleted,
                       Description = e.Description,
                       ProcessTemplateId = e.ProcessTemplateId,
                       PurchaseOrderId = e.PurchaseOrderId,
                       CurrentStepId = e.CurrentStepId,
                       StartDate = e.StartDate,
                       TargetDate = e.TargetDate,
                       ForecastDate = e.ForecastDate,
                       RealizedDate = e.RealizedDate,
                       IsApproved = e.IsApproved,
                       ApproveDate = e.ApproveDate,
                       Cancelled = e.Cancelled,
                       CancelDate = e.CancelDate,
                       CancellationReason = e.CancellationReason,
                   };
        }
    
    
        /// <summary>
        /// Default query for ProcessStepRevisions
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<ProcessStepRevision> GetProcessStepRevisionQuery()
        {
            IQueryable<ProcessStepRevision> query = ProcessStepRevisions;
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from ProcessStepRevision query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProcessStepRevisionDTO> GetProcessStepRevisionDtoQuery()
        {
            return GetProcessStepRevisionDtoQuery(GetProcessStepRevisionQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from ProcessStepRevision query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProcessStepRevisionDTO> GetProcessStepRevisionDtoQuery(IQueryable<ProcessStepRevision> query)
        {
            return from e in query
                   select new ProcessStepRevisionDTO
                   {
                       Id = e.Id,
                       ProcessStepId = e.ProcessStepId,
                       IsCompleted = e.IsCompleted,
                       TargetDate = e.TargetDate,
                       ForecastDate = e.ForecastDate,
                       RealizedDate = e.RealizedDate,
                   };
        }
    
    
        /// <summary>
        /// Default query for ProcessSteps
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<ProcessStep> GetProcessStepQuery()
        {
            IQueryable<ProcessStep> query = ProcessSteps.OrderBy(p => p.DisplayOrder);
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from ProcessStep query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProcessStepDTO> GetProcessStepDtoQuery()
        {
            return GetProcessStepDtoQuery(GetProcessStepQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from ProcessStep query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProcessStepDTO> GetProcessStepDtoQuery(IQueryable<ProcessStep> query)
        {
            return from e in query
                   select new ProcessStepDTO
                   {
                       Id = e.Id,
                       Title = e.Title,
                       IsCompleted = e.IsCompleted,
                       Description = e.Description,
                       DisplayOrder = e.DisplayOrder,
                       ProcessId = e.ProcessId,
                       TemplateId = e.TemplateId,
                       TargetDate = e.TargetDate,
                       ForecastDate = e.ForecastDate,
                       RealizedDate = e.RealizedDate,
                       IsApproved = e.IsApproved,
                       ApproveDate = e.ApproveDate,
                   };
        }
    
    
        /// <summary>
        /// Default query for ProcessStepTemplates
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<ProcessStepTemplate> GetProcessStepTemplateQuery()
        {
            IQueryable<ProcessStepTemplate> query = ProcessStepTemplates.OrderBy(p => p.DisplayOrder);
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from ProcessStepTemplate query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProcessStepTemplateDTO> GetProcessStepTemplateDtoQuery()
        {
            return GetProcessStepTemplateDtoQuery(GetProcessStepTemplateQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from ProcessStepTemplate query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProcessStepTemplateDTO> GetProcessStepTemplateDtoQuery(IQueryable<ProcessStepTemplate> query)
        {
            return from e in query
                   select new ProcessStepTemplateDTO
                   {
                       Id = e.Id,
                       Title = e.Title,
                       DisplayOrder = e.DisplayOrder,
                       ProcessTemplateId = e.ProcessTemplateId,
                       RequiredWorkDays = e.RequiredWorkDays,
                       ReqDaysBeforeDueDate = e.ReqDaysBeforeDueDate,
                       IgnoreInRepeat = e.IgnoreInRepeat,
                       DependedStepId = e.DependedStepId,
                   };
        }
    
    
        /// <summary>
        /// Default query for ProcessTemplates
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<ProcessTemplate> GetProcessTemplateQuery()
        {
            IQueryable<ProcessTemplate> query = ProcessTemplates.OrderBy(p => p.TemplateName);
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from ProcessTemplate query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProcessTemplateDTO> GetProcessTemplateDtoQuery()
        {
            return GetProcessTemplateDtoQuery(GetProcessTemplateQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from ProcessTemplate query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProcessTemplateDTO> GetProcessTemplateDtoQuery(IQueryable<ProcessTemplate> query)
        {
            return from e in query
                   select new ProcessTemplateDTO
                   {
                       Id = e.Id,
                       TemplateName = e.TemplateName,
                       DefaultTitle = e.DefaultTitle,
                       IsApproved = e.IsApproved,
                       ApproveDate = e.ApproveDate,
                   };
        }
    
    
        /// <summary>
        /// Default query for ProductCategories
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<ProductCategory> GetProductCategoryQuery()
        {
            IQueryable<ProductCategory> query = ProductCategories;
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from ProductCategory query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProductCategoryDTO> GetProductCategoryDtoQuery()
        {
            return GetProductCategoryDtoQuery(GetProductCategoryQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from ProductCategory query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProductCategoryDTO> GetProductCategoryDtoQuery(IQueryable<ProductCategory> query)
        {
            return from e in query
                   select new ProductCategoryDTO
                   {
                       Id = e.Id,
                       CategoryName = e.CategoryName,
                       CategoryCode = e.CategoryCode,
                       ParentCategoryId = e.ParentCategoryId,
                   };
        }
    
    
        /// <summary>
        /// Default query for Products
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<Product> GetProductQuery()
        {
            IQueryable<Product> query = Products;
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Product query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProductDTO> GetProductDtoQuery()
        {
            return GetProductDtoQuery(GetProductQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Product query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<ProductDTO> GetProductDtoQuery(IQueryable<Product> query)
        {
            return from e in query
                   select new ProductDTO
                   {
                       Id = e.Id,
                       ProductCode = e.ProductCode,
                       Description = e.Description,
                       CategoryId = e.CategoryId,
                       Licensed = e.Licensed,
                       ImageUrl = e.ImageUrl,
                       UnitPrice = e.UnitPrice,
                       SellingCurrencyId = e.SellingCurrencyId,
                       UnitPrice2 = e.UnitPrice2,
                       SellingCurrency2Id = e.SellingCurrency2Id,
                       LicensorPrice = e.LicensorPrice,
                       LicensorCurrencyId = e.LicensorCurrencyId,
                       BuyingPrice = e.BuyingPrice,
                       BuyingCurrencyId = e.BuyingCurrencyId,
                       BuyingPrice2 = e.BuyingPrice2,
                       BuyingCurrency2Id = e.BuyingCurrency2Id,
                       RoyaltyFee = e.RoyaltyFee,
                       RoyaltyCurrencyId = e.RoyaltyCurrencyId,
                       RetailPrice = e.RetailPrice,
                       RetailCurrencyId = e.RetailCurrencyId,
                       Discontinued = e.Discontinued,
                       DiscontinueDate = e.DiscontinueDate,
                       DiscontinueNotes = e.DiscontinueNotes,
                   };
        }
    
    
        /// <summary>
        /// Default query for PurchaseOrders
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<PurchaseOrder> GetPurchaseOrderQuery()
        {
            IQueryable<PurchaseOrder> query = PurchaseOrders;
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from PurchaseOrder query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<PurchaseOrderDTO> GetPurchaseOrderDtoQuery()
        {
            return GetPurchaseOrderDtoQuery(GetPurchaseOrderQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from PurchaseOrder query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<PurchaseOrderDTO> GetPurchaseOrderDtoQuery(IQueryable<PurchaseOrder> query)
        {
            return from e in query
                   select new PurchaseOrderDTO
                   {
                       Id = e.Id,
                       PoNr = e.PoNr,
                       RefCode = e.RefCode,
                       CustomerRefNr = e.CustomerRefNr,
                       OrderDate = e.OrderDate,
                       DueDate = e.DueDate,
                       IsRepeat = e.IsRepeat,
                       ParentPoId = e.ParentPoId,
                       DesignerId = e.DesignerId,
                       Merchandiser1Id = e.Merchandiser1Id,
                       Merchandiser2Id = e.Merchandiser2Id,
                       Description = e.Description,
                       CustomerId = e.CustomerId,
                       CustomerDepartmentId = e.CustomerDepartmentId,
                       CustomerPoNr = e.CustomerPoNr,
                       LicensorId = e.LicensorId,
                       ProductId = e.ProductId,
                       SizingStandardId = e.SizingStandardId,
                       FabricComposition = e.FabricComposition,
                       Colour = e.Colour,
                       Print = e.Print,
                       ShipmentHangingFolded = e.ShipmentHangingFolded,
                       HangerSticker = e.HangerSticker,
                       Labelling = e.Labelling,
                       WovenLabel = e.WovenLabel,
                       WashingInstructions = e.WashingInstructions,
                       Quantity = e.Quantity,
                       DiscountRate = e.DiscountRate,
                       UnitPrice = e.UnitPrice,
                       SellingCurrencyId = e.SellingCurrencyId,
                       UnitPrice2 = e.UnitPrice2,
                       SellingCurrency2Id = e.SellingCurrency2Id,
                       LicensorPrice = e.LicensorPrice,
                       LicensorCurrencyId = e.LicensorCurrencyId,
                       BuyingPrice = e.BuyingPrice,
                       BuyingCurrencyId = e.BuyingCurrencyId,
                       BuyingPrice2 = e.BuyingPrice2,
                       BuyingCurrency2Id = e.BuyingCurrency2Id,
                       RoyaltyFee = e.RoyaltyFee,
                       RoyaltyCurrencyId = e.RoyaltyCurrencyId,
                       RetailPrice = e.RetailPrice,
                       RetailCurrencyId = e.RetailCurrencyId,
                       SizeRatioDivisor = e.SizeRatioDivisor,
                       FreightTermId = e.FreightTermId,
                       SupplierId = e.SupplierId,
                       SupplierDueDate = e.SupplierDueDate,
                       InitialComments = e.InitialComments,
                       Notes = e.Notes,
                       IsApproved = e.IsApproved,
                       ApproveDate = e.ApproveDate,
                       Cancelled = e.Cancelled,
                       CancelDate = e.CancelDate,
                       CancellationReason = e.CancellationReason,
                       Closed = e.Closed,
                       ClosedUserIp = e.ClosedUserIp,
                       ClosedUserId = e.ClosedUserId,
                   };
        }
    
    
        /// <summary>
        /// Default query for Sizings
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<Sizing> GetSizingQuery()
        {
            IQueryable<Sizing> query = Sizings.OrderBy(p => p.DisplayOrder);
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Sizing query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<SizingDTO> GetSizingDtoQuery()
        {
            return GetSizingDtoQuery(GetSizingQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from Sizing query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<SizingDTO> GetSizingDtoQuery(IQueryable<Sizing> query)
        {
            return from e in query
                   select new SizingDTO
                   {
                       Id = e.Id,
                       DisplayOrder = e.DisplayOrder,
                       Caption = e.Caption,
                       SizingStandardId = e.SizingStandardId,
                   };
        }
    
    
        /// <summary>
        /// Default query for SizingStandards
        /// </summary>
        /// <returns></returns>
        public virtual IQueryable<SizingStandard> GetSizingStandardQuery()
        {
            IQueryable<SizingStandard> query = SizingStandards.OrderBy(p => p.Title);
            return query;
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from SizingStandard query
        /// </summary>
        /// <param name="query">query to be converted</param>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<SizingStandardDTO> GetSizingStandardDtoQuery()
        {
            return GetSizingStandardDtoQuery(GetSizingStandardQuery());
        }
    
        /// <summary>
        /// Gets a lighter data transfer object query from SizingStandard query
        /// </summary>
        /// <returns>Converted data transfer object query</returns>
        public virtual IQueryable<SizingStandardDTO> GetSizingStandardDtoQuery(IQueryable<SizingStandard> query)
        {
            return from e in query
                   select new SizingStandardDTO
                   {
                       Id = e.Id,
                       Title = e.Title,
                   };
        }
    
    }
}
