//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CriticalPath.Data
{
    using System;
    using System.Collections.Generic;
    
    public partial class Contact : ICreatorId, ICreatorIp, ICreateDate, IModifyNr, IModifierId, IModifierIp, IModifyDate, IDiscontinued, IDiscontinuedUser, IPerson
    {
        public int Id { get; set; }
        public int CompanyId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string EmailWork { get; set; }
        public string EmailHome { get; set; }
        public string PhoneMobile { get; set; }
        public string PhoneWork1 { get; set; }
        public string PhoneWork2 { get; set; }
        public bool Discontinued { get; set; }
        public Nullable<System.DateTime> DiscontinueDate { get; set; }
        public string DiscontinueNotes { get; set; }
        public string Notes { get; set; }
        public int ModifyNr { get; set; }
        public System.DateTime ModifyDate { get; set; }
        public string DiscontinuedUserId { get; set; }
        public string DiscontinuedUserIp { get; set; }
        public string ModifierId { get; set; }
        public string ModifierIp { get; set; }
        public System.DateTime CreateDate { get; set; }
        public string CreatorId { get; set; }
        public string CreatorIp { get; set; }
    
        public virtual Company Company { get; set; }
        public virtual AspNetUser CreatedUser { get; set; }
        public virtual AspNetUser DiscontinuedUser { get; set; }
        public virtual AspNetUser ModifiedUser { get; set; }
    	/// <summary>
    	/// Clones all properties in a new Contact instance,
    	/// except PrimaryKey(s)
    	/// </summary>
    	/// <returns>New Contact instance</returns>
        public Contact Clone()
        {
            var clone = new Contact();
            clone.CompanyId = CompanyId;
            clone.FirstName = FirstName;
            clone.LastName = LastName;
            clone.EmailWork = EmailWork;
            clone.EmailHome = EmailHome;
            clone.PhoneMobile = PhoneMobile;
            clone.PhoneWork1 = PhoneWork1;
            clone.PhoneWork2 = PhoneWork2;
            clone.Discontinued = Discontinued;
            clone.DiscontinueDate = DiscontinueDate;
            clone.DiscontinueNotes = DiscontinueNotes;
            clone.Notes = Notes;
            clone.ModifyNr = ModifyNr;
            clone.ModifyDate = ModifyDate;
            clone.DiscontinuedUserId = DiscontinuedUserId;
            clone.DiscontinuedUserIp = DiscontinuedUserIp;
            clone.ModifierId = ModifierId;
            clone.ModifierIp = ModifierIp;
            clone.CreateDate = CreateDate;
            clone.CreatorId = CreatorId;
            clone.CreatorIp = CreatorIp;
    
            Cloning(clone);
    
            return clone;
        }
    
    	// Use below function in a partial class file (eg. Contact.part.cs)
    	// to add more complexity to clone
        partial void Cloning(Contact clone);
    }
    
    //Data Transfer Object type for Contact
    public partial class ContactDTO
    {
        public ContactDTO() { }
    
        public ContactDTO(Contact entity)
        {
            Id = entity.Id;
            CompanyId = entity.CompanyId;
            FirstName = entity.FirstName;
            LastName = entity.LastName;
            EmailWork = entity.EmailWork;
            EmailHome = entity.EmailHome;
            PhoneMobile = entity.PhoneMobile;
            PhoneWork1 = entity.PhoneWork1;
            PhoneWork2 = entity.PhoneWork2;
            Discontinued = entity.Discontinued;
            DiscontinueDate = entity.DiscontinueDate;
            DiscontinueNotes = entity.DiscontinueNotes;
            Notes = entity.Notes;
        
            Initiliazing(entity);
        }
    
        partial void Initiliazing(Contact entity);
        
        public virtual Contact ToContact()
        {
            var entity = new Contact();
            entity.Id = Id;
            entity.CompanyId = CompanyId;
            entity.FirstName = FirstName;
            entity.LastName = LastName;
            entity.EmailWork = EmailWork;
            entity.EmailHome = EmailHome;
            entity.PhoneMobile = PhoneMobile;
            entity.PhoneWork1 = PhoneWork1;
            entity.PhoneWork2 = PhoneWork2;
            entity.Discontinued = Discontinued;
            entity.DiscontinueDate = DiscontinueDate;
            entity.DiscontinueNotes = DiscontinueNotes;
            entity.Notes = Notes;
    
            Converting(entity);
    
            return entity;
        }
    
        partial void Converting(Contact entity);
      
        public int Id { get; set; }
        public int CompanyId { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string EmailWork { get; set; }
        public string EmailHome { get; set; }
        public string PhoneMobile { get; set; }
        public string PhoneWork1 { get; set; }
        public string PhoneWork2 { get; set; }
        public bool Discontinued { get; set; }
        public Nullable<System.DateTime> DiscontinueDate { get; set; }
        public string DiscontinueNotes { get; set; }
        public string Notes { get; set; }
    }
}
