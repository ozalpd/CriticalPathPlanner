//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CriticalPath.Data
{
    using System;
    using System.Collections.Generic;
    
    public partial class Product : ICreatorId, ICreatorIp, ICreateDate, IModifyNr, IModifierId, IModifierIp, IModifyDate, IDiscontinued, IDiscontinuedUser, ISellingPrice, IRetailPrice, ILicensorPrice, IRoyaltyFee, IBuyingPrice, IAllPrice
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Product()
        {
            this.PurchaseOrders = new HashSet<PurchaseOrder>();
            this.Suppliers = new HashSet<Supplier>();
        }
    
        public int Id { get; set; }
        public string ProductCode { get; set; }
        public string Description { get; set; }
        public int CategoryId { get; set; }
        public bool Licensed { get; set; }
        public string ImageUrl { get; set; }
        public decimal UnitPrice { get; set; }
        public int SellingCurrencyId { get; set; }
        public Nullable<decimal> UnitPrice2 { get; set; }
        public Nullable<int> SellingCurrency2Id { get; set; }
        public Nullable<decimal> LicensorPrice { get; set; }
        public Nullable<int> LicensorCurrencyId { get; set; }
        public Nullable<decimal> BuyingPrice { get; set; }
        public Nullable<int> BuyingCurrencyId { get; set; }
        public Nullable<decimal> BuyingPrice2 { get; set; }
        public Nullable<int> BuyingCurrency2Id { get; set; }
        public Nullable<decimal> RoyaltyFee { get; set; }
        public Nullable<int> RoyaltyCurrencyId { get; set; }
        public Nullable<decimal> RetailPrice { get; set; }
        public Nullable<int> RetailCurrencyId { get; set; }
        public bool Discontinued { get; set; }
        public Nullable<System.DateTime> DiscontinueDate { get; set; }
        public string DiscontinueNotes { get; set; }
        public string DiscontinuedUserId { get; set; }
        public string DiscontinuedUserIp { get; set; }
        public int ModifyNr { get; set; }
        public System.DateTime ModifyDate { get; set; }
        public string ModifierId { get; set; }
        public string ModifierIp { get; set; }
        public System.DateTime CreateDate { get; set; }
        public string CreatorId { get; set; }
        public string CreatorIp { get; set; }
    
        public virtual ProductCategory Category { get; set; }
        public virtual AspNetUser ModifiedUser { get; set; }
        public virtual AspNetUser CreatedUser { get; set; }
        public virtual AspNetUser DiscontinuedUser { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PurchaseOrder> PurchaseOrders { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Supplier> Suppliers { get; set; }
        public virtual Currency BuyingCurrency { get; set; }
        public virtual Currency BuyingCurrency2 { get; set; }
        public virtual Currency RetailCurrency { get; set; }
        public virtual Currency RoyaltyCurrency { get; set; }
        public virtual Currency SellingCurrency { get; set; }
        public virtual Currency SellingCurrency2 { get; set; }
        public virtual Currency LicensorCurrency { get; set; }
    	/// <summary>
    	/// Clones all properties in a new Product instance,
    	/// except PrimaryKey(s)
    	/// </summary>
    	/// <returns>New Product instance</returns>
        public Product Clone()
        {
            var clone = new Product();
            clone.ProductCode = ProductCode;
            clone.Description = Description;
            clone.CategoryId = CategoryId;
            clone.Licensed = Licensed;
            clone.ImageUrl = ImageUrl;
            clone.UnitPrice = UnitPrice;
            clone.SellingCurrencyId = SellingCurrencyId;
            clone.UnitPrice2 = UnitPrice2;
            clone.SellingCurrency2Id = SellingCurrency2Id;
            clone.LicensorPrice = LicensorPrice;
            clone.LicensorCurrencyId = LicensorCurrencyId;
            clone.BuyingPrice = BuyingPrice;
            clone.BuyingCurrencyId = BuyingCurrencyId;
            clone.BuyingPrice2 = BuyingPrice2;
            clone.BuyingCurrency2Id = BuyingCurrency2Id;
            clone.RoyaltyFee = RoyaltyFee;
            clone.RoyaltyCurrencyId = RoyaltyCurrencyId;
            clone.RetailPrice = RetailPrice;
            clone.RetailCurrencyId = RetailCurrencyId;
            clone.Discontinued = Discontinued;
            clone.DiscontinueDate = DiscontinueDate;
            clone.DiscontinueNotes = DiscontinueNotes;
            clone.DiscontinuedUserId = DiscontinuedUserId;
            clone.DiscontinuedUserIp = DiscontinuedUserIp;
            clone.ModifyNr = ModifyNr;
            clone.ModifyDate = ModifyDate;
            clone.ModifierId = ModifierId;
            clone.ModifierIp = ModifierIp;
            clone.CreateDate = CreateDate;
            clone.CreatorId = CreatorId;
            clone.CreatorIp = CreatorIp;
    
            Cloning(clone);
    
            return clone;
        }
    
    	// Use below function in a partial class file (eg. Product.part.cs)
    	// to add more complexity to clone
        partial void Cloning(Product clone);
    }
    
    //Data Transfer Object type for Product
    public partial class ProductDTO
    {
        public ProductDTO() { }
    
        public ProductDTO(Product entity)
        {
            Id = entity.Id;
            ProductCode = entity.ProductCode;
            Description = entity.Description;
            CategoryId = entity.CategoryId;
            Licensed = entity.Licensed;
            ImageUrl = entity.ImageUrl;
            UnitPrice = entity.UnitPrice;
            SellingCurrencyId = entity.SellingCurrencyId;
            UnitPrice2 = entity.UnitPrice2;
            SellingCurrency2Id = entity.SellingCurrency2Id;
            LicensorPrice = entity.LicensorPrice;
            LicensorCurrencyId = entity.LicensorCurrencyId;
            BuyingPrice = entity.BuyingPrice;
            BuyingCurrencyId = entity.BuyingCurrencyId;
            BuyingPrice2 = entity.BuyingPrice2;
            BuyingCurrency2Id = entity.BuyingCurrency2Id;
            RoyaltyFee = entity.RoyaltyFee;
            RoyaltyCurrencyId = entity.RoyaltyCurrencyId;
            RetailPrice = entity.RetailPrice;
            RetailCurrencyId = entity.RetailCurrencyId;
            Discontinued = entity.Discontinued;
            DiscontinueDate = entity.DiscontinueDate;
            DiscontinueNotes = entity.DiscontinueNotes;
        
            Initiliazing(entity);
        }
    
        partial void Initiliazing(Product entity);
        
        public virtual Product ToProduct()
        {
            var entity = new Product();
            entity.Id = Id;
            entity.ProductCode = ProductCode;
            entity.Description = Description;
            entity.CategoryId = CategoryId;
            entity.Licensed = Licensed;
            entity.ImageUrl = ImageUrl;
            entity.UnitPrice = UnitPrice;
            entity.SellingCurrencyId = SellingCurrencyId;
            entity.UnitPrice2 = UnitPrice2;
            entity.SellingCurrency2Id = SellingCurrency2Id;
            entity.LicensorPrice = LicensorPrice;
            entity.LicensorCurrencyId = LicensorCurrencyId;
            entity.BuyingPrice = BuyingPrice;
            entity.BuyingCurrencyId = BuyingCurrencyId;
            entity.BuyingPrice2 = BuyingPrice2;
            entity.BuyingCurrency2Id = BuyingCurrency2Id;
            entity.RoyaltyFee = RoyaltyFee;
            entity.RoyaltyCurrencyId = RoyaltyCurrencyId;
            entity.RetailPrice = RetailPrice;
            entity.RetailCurrencyId = RetailCurrencyId;
            entity.Discontinued = Discontinued;
            entity.DiscontinueDate = DiscontinueDate;
            entity.DiscontinueNotes = DiscontinueNotes;
    
            Converting(entity);
    
            return entity;
        }
    
        partial void Converting(Product entity);
      
        public int Id { get; set; }
        public string ProductCode { get; set; }
        public string Description { get; set; }
        public int CategoryId { get; set; }
        public bool Licensed { get; set; }
        public string ImageUrl { get; set; }
        public decimal UnitPrice { get; set; }
        public int SellingCurrencyId { get; set; }
        public Nullable<decimal> UnitPrice2 { get; set; }
        public Nullable<int> SellingCurrency2Id { get; set; }
        public Nullable<decimal> LicensorPrice { get; set; }
        public Nullable<int> LicensorCurrencyId { get; set; }
        public Nullable<decimal> BuyingPrice { get; set; }
        public Nullable<int> BuyingCurrencyId { get; set; }
        public Nullable<decimal> BuyingPrice2 { get; set; }
        public Nullable<int> BuyingCurrency2Id { get; set; }
        public Nullable<decimal> RoyaltyFee { get; set; }
        public Nullable<int> RoyaltyCurrencyId { get; set; }
        public Nullable<decimal> RetailPrice { get; set; }
        public Nullable<int> RetailCurrencyId { get; set; }
        public bool Discontinued { get; set; }
        public Nullable<System.DateTime> DiscontinueDate { get; set; }
        public string DiscontinueNotes { get; set; }
    }
}
