//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CriticalPath.Data
{
    using System;
    using System.Collections.Generic;
    
    public partial class ProcessStepRevision : ICreatorId, ICreatorIp, ICreateDate
    {
        public int Id { get; set; }
        public int ProcessStepId { get; set; }
        public bool IsCompleted { get; set; }
        public Nullable<System.DateTime> TargetDate { get; set; }
        public Nullable<System.DateTime> ForecastDate { get; set; }
        public Nullable<System.DateTime> RealizedDate { get; set; }
        public System.DateTime CreateDate { get; set; }
        public string CreatorId { get; set; }
        public string CreatorIp { get; set; }
    
        public virtual AspNetUser CreatedUser { get; set; }
        public virtual ProcessStep ProcessStep { get; set; }
    	/// <summary>
    	/// Clones all properties in a new ProcessStepRevision instance,
    	/// except PrimaryKey(s)
    	/// </summary>
    	/// <returns>New ProcessStepRevision instance</returns>
        public ProcessStepRevision Clone()
        {
            var clone = new ProcessStepRevision();
            clone.ProcessStepId = ProcessStepId;
            clone.IsCompleted = IsCompleted;
            clone.TargetDate = TargetDate;
            clone.ForecastDate = ForecastDate;
            clone.RealizedDate = RealizedDate;
            clone.CreateDate = CreateDate;
            clone.CreatorId = CreatorId;
            clone.CreatorIp = CreatorIp;
    
            Cloning(clone);
    
            return clone;
        }
    
    	// Use below function in a partial class file (eg. ProcessStepRevision.part.cs)
    	// to add more complexity to clone
        partial void Cloning(ProcessStepRevision clone);
    }
    
    //Data Transfer Object type for ProcessStepRevision
    public partial class ProcessStepRevisionDTO
    {
        public ProcessStepRevisionDTO() { }
    
        public ProcessStepRevisionDTO(ProcessStepRevision entity)
        {
            Id = entity.Id;
            ProcessStepId = entity.ProcessStepId;
            IsCompleted = entity.IsCompleted;
            TargetDate = entity.TargetDate;
            ForecastDate = entity.ForecastDate;
            RealizedDate = entity.RealizedDate;
        
            Initiliazing(entity);
        }
    
        partial void Initiliazing(ProcessStepRevision entity);
        
        public virtual ProcessStepRevision ToProcessStepRevision()
        {
            var entity = new ProcessStepRevision();
            entity.Id = Id;
            entity.ProcessStepId = ProcessStepId;
            entity.IsCompleted = IsCompleted;
            entity.TargetDate = TargetDate;
            entity.ForecastDate = ForecastDate;
            entity.RealizedDate = RealizedDate;
    
            Converting(entity);
    
            return entity;
        }
    
        partial void Converting(ProcessStepRevision entity);
      
        public int Id { get; set; }
        public int ProcessStepId { get; set; }
        public bool IsCompleted { get; set; }
        public Nullable<System.DateTime> TargetDate { get; set; }
        public Nullable<System.DateTime> ForecastDate { get; set; }
        public Nullable<System.DateTime> RealizedDate { get; set; }
    }
}
