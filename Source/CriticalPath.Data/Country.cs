//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CriticalPath.Data
{
    using System;
    using System.Collections.Generic;
    
    public partial class Country : IDisplayOrder
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Country()
        {
            this.Companies = new HashSet<Company>();
        }
    
        public int Id { get; set; }
        public string CountryName { get; set; }
        public string TwoLetterIsoCode { get; set; }
        public string ThreeLetterIsoCode { get; set; }
        public int NumericIsoCode { get; set; }
        public int DisplayOrder { get; set; }
        public bool IsPublished { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Company> Companies { get; set; }
    	/// <summary>
    	/// Clones all properties in a new Country instance,
    	/// except PrimaryKey(s)
    	/// </summary>
    	/// <returns>New Country instance</returns>
        public Country Clone()
        {
            var clone = new Country();
            clone.CountryName = CountryName;
            clone.TwoLetterIsoCode = TwoLetterIsoCode;
            clone.ThreeLetterIsoCode = ThreeLetterIsoCode;
            clone.NumericIsoCode = NumericIsoCode;
            clone.DisplayOrder = DisplayOrder;
            clone.IsPublished = IsPublished;
    
            Cloning(clone);
    
            return clone;
        }
    
    	// Use below function in a partial class file (eg. Country.part.cs)
    	// to add more complexity to clone
        partial void Cloning(Country clone);
    }
    
    //Data Transfer Object type for Country
    public partial class CountryDTO
    {
        public CountryDTO() { }
    
        public CountryDTO(Country entity)
        {
            Id = entity.Id;
            CountryName = entity.CountryName;
            TwoLetterIsoCode = entity.TwoLetterIsoCode;
            ThreeLetterIsoCode = entity.ThreeLetterIsoCode;
            NumericIsoCode = entity.NumericIsoCode;
            DisplayOrder = entity.DisplayOrder;
        
            Initiliazing(entity);
        }
    
        partial void Initiliazing(Country entity);
        
        public virtual Country ToCountry()
        {
            var entity = new Country();
            entity.Id = Id;
            entity.CountryName = CountryName;
            entity.TwoLetterIsoCode = TwoLetterIsoCode;
            entity.ThreeLetterIsoCode = ThreeLetterIsoCode;
            entity.NumericIsoCode = NumericIsoCode;
            entity.DisplayOrder = DisplayOrder;
    
            Converting(entity);
    
            return entity;
        }
    
        partial void Converting(Country entity);
      
        public int Id { get; set; }
        public string CountryName { get; set; }
        public string TwoLetterIsoCode { get; set; }
        public string ThreeLetterIsoCode { get; set; }
        public int NumericIsoCode { get; set; }
        public int DisplayOrder { get; set; }
    }
}
