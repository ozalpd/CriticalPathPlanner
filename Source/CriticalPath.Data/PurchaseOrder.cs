//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CriticalPath.Data
{
    using System;
    using System.Collections.Generic;
    
    public partial class PurchaseOrder : ICreatorId, ICreatorIp, ICreateDate, IModifyNr, IModifierId, IModifierIp, IModifyDate, IIsApproved, IApproval, IHasProduct, ICancelled, ICancellation, ISellingPrice, IRetailPrice, ILicensorPrice, IRoyaltyFee, IBuyingPrice, IAllPrice
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public PurchaseOrder()
        {
            this.SubOrders = new HashSet<PurchaseOrder>();
            this.SizeRatios = new HashSet<POSizeRatio>();
            this.Processes = new HashSet<Process>();
            this.Attachments = new HashSet<POAttachment>();
            this.Images = new HashSet<POImage>();
            this.Shipments = new HashSet<POShipment>();
        }
    
        public int Id { get; set; }
        public string PoNr { get; set; }
        public string RefCode { get; set; }
        public string CustomerRefNr { get; set; }
        public System.DateTime OrderDate { get; set; }
        public Nullable<System.DateTime> DueDate { get; set; }
        public bool IsRepeat { get; set; }
        public Nullable<int> ParentPoId { get; set; }
        public Nullable<int> DesignerId { get; set; }
        public Nullable<int> Merchandiser1Id { get; set; }
        public Nullable<int> Merchandiser2Id { get; set; }
        public string Description { get; set; }
        public int CustomerId { get; set; }
        public Nullable<int> CustomerDepartmentId { get; set; }
        public string CustomerPoNr { get; set; }
        public Nullable<int> LicensorId { get; set; }
        public int ProductId { get; set; }
        public int SizingStandardId { get; set; }
        public string FabricComposition { get; set; }
        public string Colour { get; set; }
        public string Print { get; set; }
        public int ShipmentHangingFolded { get; set; }
        public bool HangerSticker { get; set; }
        public string Labelling { get; set; }
        public string WovenLabel { get; set; }
        public string WashingInstructions { get; set; }
        public int Quantity { get; set; }
        public decimal DiscountRate { get; set; }
        public decimal UnitPrice { get; set; }
        public int SellingCurrencyId { get; set; }
        public Nullable<decimal> UnitPrice2 { get; set; }
        public Nullable<int> SellingCurrency2Id { get; set; }
        public Nullable<decimal> LicensorPrice { get; set; }
        public Nullable<int> LicensorCurrencyId { get; set; }
        public Nullable<decimal> BuyingPrice { get; set; }
        public Nullable<int> BuyingCurrencyId { get; set; }
        public Nullable<decimal> BuyingPrice2 { get; set; }
        public Nullable<int> BuyingCurrency2Id { get; set; }
        public Nullable<decimal> RoyaltyFee { get; set; }
        public Nullable<int> RoyaltyCurrencyId { get; set; }
        public Nullable<decimal> RetailPrice { get; set; }
        public Nullable<int> RetailCurrencyId { get; set; }
        public int SizeRatioDivisor { get; set; }
        public int FreightTermId { get; set; }
        public Nullable<int> SupplierId { get; set; }
        public Nullable<System.DateTime> SupplierDueDate { get; set; }
        public string InitialComments { get; set; }
        public string Notes { get; set; }
        public bool IsApproved { get; set; }
        public Nullable<System.DateTime> ApproveDate { get; set; }
        public string ApprovedUserId { get; set; }
        public string ApprovedUserIp { get; set; }
        public bool Cancelled { get; set; }
        public Nullable<System.DateTime> CancelDate { get; set; }
        public string CancellationReason { get; set; }
        public string CancelledUserId { get; set; }
        public string CancelledUserIp { get; set; }
        public bool Closed { get; set; }
        public string ClosedUserIp { get; set; }
        public string ClosedUserId { get; set; }
        public int ModifyNr { get; set; }
        public System.DateTime ModifyDate { get; set; }
        public string ModifierId { get; set; }
        public string ModifierIp { get; set; }
        public System.DateTime CreateDate { get; set; }
        public string CreatorId { get; set; }
        public string CreatorIp { get; set; }
    
        public virtual Product Product { get; set; }
        public virtual PurchaseOrder ParentPo { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<PurchaseOrder> SubOrders { get; set; }
        public virtual Customer Customer { get; set; }
        public virtual CustomerDepartment CustomerDepartment { get; set; }
        public virtual Licensor Licensor { get; set; }
        public virtual Employee Designer { get; set; }
        public virtual Employee Merchandiser1 { get; set; }
        public virtual Employee Merchandiser2 { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<POSizeRatio> SizeRatios { get; set; }
        public virtual SizingStandard SizingStandard { get; set; }
        public virtual FreightTerm FreightTerm { get; set; }
        public virtual Supplier Supplier { get; set; }
        public virtual Currency BuyingCurrency { get; set; }
        public virtual Currency BuyingCurrency2 { get; set; }
        public virtual Currency LicensorCurrency { get; set; }
        public virtual Currency RetailCurrency { get; set; }
        public virtual Currency RoyaltyCurrency { get; set; }
        public virtual Currency SellingCurrency { get; set; }
        public virtual Currency SellingCurrency2 { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Process> Processes { get; set; }
        public virtual AspNetUser ApprovedUser { get; set; }
        public virtual AspNetUser CreatedUser { get; set; }
        public virtual AspNetUser CancelledUser { get; set; }
        public virtual AspNetUser ModifiedUser { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<POAttachment> Attachments { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<POImage> Images { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<POShipment> Shipments { get; set; }
    	/// <summary>
    	/// Clones all properties in a new PurchaseOrder instance,
    	/// except PrimaryKey(s)
    	/// </summary>
    	/// <returns>New PurchaseOrder instance</returns>
        public PurchaseOrder Clone()
        {
            var clone = new PurchaseOrder();
            clone.PoNr = PoNr;
            clone.RefCode = RefCode;
            clone.CustomerRefNr = CustomerRefNr;
            clone.OrderDate = OrderDate;
            clone.DueDate = DueDate;
            clone.IsRepeat = IsRepeat;
            clone.ParentPoId = ParentPoId;
            clone.DesignerId = DesignerId;
            clone.Merchandiser1Id = Merchandiser1Id;
            clone.Merchandiser2Id = Merchandiser2Id;
            clone.Description = Description;
            clone.CustomerId = CustomerId;
            clone.CustomerDepartmentId = CustomerDepartmentId;
            clone.CustomerPoNr = CustomerPoNr;
            clone.LicensorId = LicensorId;
            clone.ProductId = ProductId;
            clone.SizingStandardId = SizingStandardId;
            clone.FabricComposition = FabricComposition;
            clone.Colour = Colour;
            clone.Print = Print;
            clone.ShipmentHangingFolded = ShipmentHangingFolded;
            clone.HangerSticker = HangerSticker;
            clone.Labelling = Labelling;
            clone.WovenLabel = WovenLabel;
            clone.WashingInstructions = WashingInstructions;
            clone.Quantity = Quantity;
            clone.DiscountRate = DiscountRate;
            clone.UnitPrice = UnitPrice;
            clone.SellingCurrencyId = SellingCurrencyId;
            clone.UnitPrice2 = UnitPrice2;
            clone.SellingCurrency2Id = SellingCurrency2Id;
            clone.LicensorPrice = LicensorPrice;
            clone.LicensorCurrencyId = LicensorCurrencyId;
            clone.BuyingPrice = BuyingPrice;
            clone.BuyingCurrencyId = BuyingCurrencyId;
            clone.BuyingPrice2 = BuyingPrice2;
            clone.BuyingCurrency2Id = BuyingCurrency2Id;
            clone.RoyaltyFee = RoyaltyFee;
            clone.RoyaltyCurrencyId = RoyaltyCurrencyId;
            clone.RetailPrice = RetailPrice;
            clone.RetailCurrencyId = RetailCurrencyId;
            clone.SizeRatioDivisor = SizeRatioDivisor;
            clone.FreightTermId = FreightTermId;
            clone.SupplierId = SupplierId;
            clone.SupplierDueDate = SupplierDueDate;
            clone.InitialComments = InitialComments;
            clone.Notes = Notes;
            clone.IsApproved = IsApproved;
            clone.ApproveDate = ApproveDate;
            clone.ApprovedUserId = ApprovedUserId;
            clone.ApprovedUserIp = ApprovedUserIp;
            clone.Cancelled = Cancelled;
            clone.CancelDate = CancelDate;
            clone.CancellationReason = CancellationReason;
            clone.CancelledUserId = CancelledUserId;
            clone.CancelledUserIp = CancelledUserIp;
            clone.Closed = Closed;
            clone.ClosedUserIp = ClosedUserIp;
            clone.ClosedUserId = ClosedUserId;
            clone.ModifyNr = ModifyNr;
            clone.ModifyDate = ModifyDate;
            clone.ModifierId = ModifierId;
            clone.ModifierIp = ModifierIp;
            clone.CreateDate = CreateDate;
            clone.CreatorId = CreatorId;
            clone.CreatorIp = CreatorIp;
    
            Cloning(clone);
    
            return clone;
        }
    
    	// Use below function in a partial class file (eg. PurchaseOrder.part.cs)
    	// to add more complexity to clone
        partial void Cloning(PurchaseOrder clone);
    }
    
    //Data Transfer Object type for PurchaseOrder
    public partial class PurchaseOrderDTO
    {
        public PurchaseOrderDTO() { }
    
        public PurchaseOrderDTO(PurchaseOrder entity)
        {
            Id = entity.Id;
            PoNr = entity.PoNr;
            RefCode = entity.RefCode;
            CustomerRefNr = entity.CustomerRefNr;
            OrderDate = entity.OrderDate;
            DueDate = entity.DueDate;
            IsRepeat = entity.IsRepeat;
            ParentPoId = entity.ParentPoId;
            DesignerId = entity.DesignerId;
            Merchandiser1Id = entity.Merchandiser1Id;
            Merchandiser2Id = entity.Merchandiser2Id;
            Description = entity.Description;
            CustomerId = entity.CustomerId;
            CustomerDepartmentId = entity.CustomerDepartmentId;
            CustomerPoNr = entity.CustomerPoNr;
            LicensorId = entity.LicensorId;
            ProductId = entity.ProductId;
            SizingStandardId = entity.SizingStandardId;
            FabricComposition = entity.FabricComposition;
            Colour = entity.Colour;
            Print = entity.Print;
            ShipmentHangingFolded = entity.ShipmentHangingFolded;
            HangerSticker = entity.HangerSticker;
            Labelling = entity.Labelling;
            WovenLabel = entity.WovenLabel;
            WashingInstructions = entity.WashingInstructions;
            Quantity = entity.Quantity;
            DiscountRate = entity.DiscountRate;
            UnitPrice = entity.UnitPrice;
            SellingCurrencyId = entity.SellingCurrencyId;
            UnitPrice2 = entity.UnitPrice2;
            SellingCurrency2Id = entity.SellingCurrency2Id;
            LicensorPrice = entity.LicensorPrice;
            LicensorCurrencyId = entity.LicensorCurrencyId;
            BuyingPrice = entity.BuyingPrice;
            BuyingCurrencyId = entity.BuyingCurrencyId;
            BuyingPrice2 = entity.BuyingPrice2;
            BuyingCurrency2Id = entity.BuyingCurrency2Id;
            RoyaltyFee = entity.RoyaltyFee;
            RoyaltyCurrencyId = entity.RoyaltyCurrencyId;
            RetailPrice = entity.RetailPrice;
            RetailCurrencyId = entity.RetailCurrencyId;
            SizeRatioDivisor = entity.SizeRatioDivisor;
            FreightTermId = entity.FreightTermId;
            SupplierId = entity.SupplierId;
            SupplierDueDate = entity.SupplierDueDate;
            InitialComments = entity.InitialComments;
            Notes = entity.Notes;
            IsApproved = entity.IsApproved;
            ApproveDate = entity.ApproveDate;
            Cancelled = entity.Cancelled;
            CancelDate = entity.CancelDate;
            CancellationReason = entity.CancellationReason;
            Closed = entity.Closed;
            ClosedUserIp = entity.ClosedUserIp;
            ClosedUserId = entity.ClosedUserId;
        
            Initiliazing(entity);
        }
    
        partial void Initiliazing(PurchaseOrder entity);
        
        public virtual PurchaseOrder ToPurchaseOrder()
        {
            var entity = new PurchaseOrder();
            entity.Id = Id;
            entity.PoNr = PoNr;
            entity.RefCode = RefCode;
            entity.CustomerRefNr = CustomerRefNr;
            entity.OrderDate = OrderDate;
            entity.DueDate = DueDate;
            entity.IsRepeat = IsRepeat;
            entity.ParentPoId = ParentPoId;
            entity.DesignerId = DesignerId;
            entity.Merchandiser1Id = Merchandiser1Id;
            entity.Merchandiser2Id = Merchandiser2Id;
            entity.Description = Description;
            entity.CustomerId = CustomerId;
            entity.CustomerDepartmentId = CustomerDepartmentId;
            entity.CustomerPoNr = CustomerPoNr;
            entity.LicensorId = LicensorId;
            entity.ProductId = ProductId;
            entity.SizingStandardId = SizingStandardId;
            entity.FabricComposition = FabricComposition;
            entity.Colour = Colour;
            entity.Print = Print;
            entity.ShipmentHangingFolded = ShipmentHangingFolded;
            entity.HangerSticker = HangerSticker;
            entity.Labelling = Labelling;
            entity.WovenLabel = WovenLabel;
            entity.WashingInstructions = WashingInstructions;
            entity.Quantity = Quantity;
            entity.DiscountRate = DiscountRate;
            entity.UnitPrice = UnitPrice;
            entity.SellingCurrencyId = SellingCurrencyId;
            entity.UnitPrice2 = UnitPrice2;
            entity.SellingCurrency2Id = SellingCurrency2Id;
            entity.LicensorPrice = LicensorPrice;
            entity.LicensorCurrencyId = LicensorCurrencyId;
            entity.BuyingPrice = BuyingPrice;
            entity.BuyingCurrencyId = BuyingCurrencyId;
            entity.BuyingPrice2 = BuyingPrice2;
            entity.BuyingCurrency2Id = BuyingCurrency2Id;
            entity.RoyaltyFee = RoyaltyFee;
            entity.RoyaltyCurrencyId = RoyaltyCurrencyId;
            entity.RetailPrice = RetailPrice;
            entity.RetailCurrencyId = RetailCurrencyId;
            entity.SizeRatioDivisor = SizeRatioDivisor;
            entity.FreightTermId = FreightTermId;
            entity.SupplierId = SupplierId;
            entity.SupplierDueDate = SupplierDueDate;
            entity.InitialComments = InitialComments;
            entity.Notes = Notes;
            entity.IsApproved = IsApproved;
            entity.ApproveDate = ApproveDate;
            entity.Cancelled = Cancelled;
            entity.CancelDate = CancelDate;
            entity.CancellationReason = CancellationReason;
            entity.Closed = Closed;
            entity.ClosedUserIp = ClosedUserIp;
            entity.ClosedUserId = ClosedUserId;
    
            Converting(entity);
    
            return entity;
        }
    
        partial void Converting(PurchaseOrder entity);
      
        public int Id { get; set; }
        public string PoNr { get; set; }
        public string RefCode { get; set; }
        public string CustomerRefNr { get; set; }
        public System.DateTime OrderDate { get; set; }
        public Nullable<System.DateTime> DueDate { get; set; }
        public bool IsRepeat { get; set; }
        public Nullable<int> ParentPoId { get; set; }
        public Nullable<int> DesignerId { get; set; }
        public Nullable<int> Merchandiser1Id { get; set; }
        public Nullable<int> Merchandiser2Id { get; set; }
        public string Description { get; set; }
        public int CustomerId { get; set; }
        public Nullable<int> CustomerDepartmentId { get; set; }
        public string CustomerPoNr { get; set; }
        public Nullable<int> LicensorId { get; set; }
        public int ProductId { get; set; }
        public int SizingStandardId { get; set; }
        public string FabricComposition { get; set; }
        public string Colour { get; set; }
        public string Print { get; set; }
        public int ShipmentHangingFolded { get; set; }
        public bool HangerSticker { get; set; }
        public string Labelling { get; set; }
        public string WovenLabel { get; set; }
        public string WashingInstructions { get; set; }
        public int Quantity { get; set; }
        public decimal DiscountRate { get; set; }
        public decimal UnitPrice { get; set; }
        public int SellingCurrencyId { get; set; }
        public Nullable<decimal> UnitPrice2 { get; set; }
        public Nullable<int> SellingCurrency2Id { get; set; }
        public Nullable<decimal> LicensorPrice { get; set; }
        public Nullable<int> LicensorCurrencyId { get; set; }
        public Nullable<decimal> BuyingPrice { get; set; }
        public Nullable<int> BuyingCurrencyId { get; set; }
        public Nullable<decimal> BuyingPrice2 { get; set; }
        public Nullable<int> BuyingCurrency2Id { get; set; }
        public Nullable<decimal> RoyaltyFee { get; set; }
        public Nullable<int> RoyaltyCurrencyId { get; set; }
        public Nullable<decimal> RetailPrice { get; set; }
        public Nullable<int> RetailCurrencyId { get; set; }
        public int SizeRatioDivisor { get; set; }
        public int FreightTermId { get; set; }
        public Nullable<int> SupplierId { get; set; }
        public Nullable<System.DateTime> SupplierDueDate { get; set; }
        public string InitialComments { get; set; }
        public string Notes { get; set; }
        public bool IsApproved { get; set; }
        public Nullable<System.DateTime> ApproveDate { get; set; }
        public bool Cancelled { get; set; }
        public Nullable<System.DateTime> CancelDate { get; set; }
        public string CancellationReason { get; set; }
        public bool Closed { get; set; }
        public string ClosedUserIp { get; set; }
        public string ClosedUserId { get; set; }
    }
}
