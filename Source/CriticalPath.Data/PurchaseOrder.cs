//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CriticalPath.Data
{
    using System;
    using System.Collections.Generic;
    
    public partial class PurchaseOrder : ICreatorId, ICreatorIp, ICreateDate, IModifyNr, IModifierId, IModifierIp, IModifyDate, IIsApproved, IApproval, IHasProduct, ICancelled, ICancellation
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public PurchaseOrder()
        {
            this.Processes = new HashSet<Process>();
            this.SizeRatios = new HashSet<SizeRatio>();
        }
    
        public int Id { get; set; }
        public string PoNr { get; set; }
        public int CustomerId { get; set; }
        public int ProductId { get; set; }
        public int SizingStandardId { get; set; }
        public System.DateTime OrderDate { get; set; }
        public Nullable<System.DateTime> DueDate { get; set; }
        public string Description { get; set; }
        public int Quantity { get; set; }
        public decimal UnitPrice { get; set; }
        public Nullable<decimal> BuyingPrice { get; set; }
        public Nullable<decimal> RetailPrice { get; set; }
        public int SizeRatioDivisor { get; set; }
        public string Notes { get; set; }
        public Nullable<System.DateTime> ApproveDate { get; set; }
        public string ApprovedUserId { get; set; }
        public string ApprovedUserIp { get; set; }
        public bool Cancelled { get; set; }
        public Nullable<System.DateTime> CancelDate { get; set; }
        public string CancelNotes { get; set; }
        public string CancelledUserId { get; set; }
        public string CancelledUserIp { get; set; }
        public bool IsApproved { get; set; }
        public int ModifyNr { get; set; }
        public System.DateTime ModifyDate { get; set; }
        public string ModifierId { get; set; }
        public string ModifierIp { get; set; }
        public System.DateTime CreateDate { get; set; }
        public string CreatorId { get; set; }
        public string CreatorIp { get; set; }
        public string CustomerPoNr { get; set; }
    
        public virtual Customer Customer { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Process> Processes { get; set; }
        public virtual Product Product { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<SizeRatio> SizeRatios { get; set; }
        public virtual SizingStandard SizingStandard { get; set; }
        public virtual AspNetUser ApprovedUser { get; set; }
        public virtual AspNetUser CreatedUser { get; set; }
        public virtual AspNetUser CancelledUser { get; set; }
        public virtual AspNetUser ModifiedUser { get; set; }
    	/// <summary>
    	/// Clones all properties in a new PurchaseOrder instance,
    	/// except PrimaryKey(s)
    	/// </summary>
    	/// <returns>New PurchaseOrder instance</returns>
        public PurchaseOrder Clone()
        {
            var clone = new PurchaseOrder();
            clone.PoNr = PoNr;
            clone.CustomerId = CustomerId;
            clone.ProductId = ProductId;
            clone.SizingStandardId = SizingStandardId;
            clone.OrderDate = OrderDate;
            clone.DueDate = DueDate;
            clone.Description = Description;
            clone.Quantity = Quantity;
            clone.UnitPrice = UnitPrice;
            clone.BuyingPrice = BuyingPrice;
            clone.RetailPrice = RetailPrice;
            clone.SizeRatioDivisor = SizeRatioDivisor;
            clone.Notes = Notes;
            clone.ApproveDate = ApproveDate;
            clone.ApprovedUserId = ApprovedUserId;
            clone.ApprovedUserIp = ApprovedUserIp;
            clone.Cancelled = Cancelled;
            clone.CancelDate = CancelDate;
            clone.CancelNotes = CancelNotes;
            clone.CancelledUserId = CancelledUserId;
            clone.CancelledUserIp = CancelledUserIp;
            clone.IsApproved = IsApproved;
            clone.ModifyNr = ModifyNr;
            clone.ModifyDate = ModifyDate;
            clone.ModifierId = ModifierId;
            clone.ModifierIp = ModifierIp;
            clone.CreateDate = CreateDate;
            clone.CreatorId = CreatorId;
            clone.CreatorIp = CreatorIp;
            clone.CustomerPoNr = CustomerPoNr;
    
            Cloning(clone);
    
            return clone;
        }
    
    	// Use below function in a partial class file (eg. PurchaseOrder.part.cs)
    	// to add more complexity to clone
        partial void Cloning(PurchaseOrder clone);
    }
    
    //Data Transfer Object type for PurchaseOrder
    public partial class PurchaseOrderDTO
    {
        public PurchaseOrderDTO() { }
    
        public PurchaseOrderDTO(PurchaseOrder entity)
        {
            Id = entity.Id;
            PoNr = entity.PoNr;
            CustomerId = entity.CustomerId;
            ProductId = entity.ProductId;
            SizingStandardId = entity.SizingStandardId;
            OrderDate = entity.OrderDate;
            DueDate = entity.DueDate;
            Description = entity.Description;
            Quantity = entity.Quantity;
            UnitPrice = entity.UnitPrice;
            BuyingPrice = entity.BuyingPrice;
            RetailPrice = entity.RetailPrice;
            SizeRatioDivisor = entity.SizeRatioDivisor;
            Notes = entity.Notes;
            ApproveDate = entity.ApproveDate;
            Cancelled = entity.Cancelled;
            CancelDate = entity.CancelDate;
            CancelNotes = entity.CancelNotes;
            IsApproved = entity.IsApproved;
            CustomerPoNr = entity.CustomerPoNr;
        
            Initiliazing(entity);
        }
    
        partial void Initiliazing(PurchaseOrder entity);
        
        public virtual PurchaseOrder ToPurchaseOrder()
        {
            var entity = new PurchaseOrder();
            entity.Id = Id;
            entity.PoNr = PoNr;
            entity.CustomerId = CustomerId;
            entity.ProductId = ProductId;
            entity.SizingStandardId = SizingStandardId;
            entity.OrderDate = OrderDate;
            entity.DueDate = DueDate;
            entity.Description = Description;
            entity.Quantity = Quantity;
            entity.UnitPrice = UnitPrice;
            entity.BuyingPrice = BuyingPrice;
            entity.RetailPrice = RetailPrice;
            entity.SizeRatioDivisor = SizeRatioDivisor;
            entity.Notes = Notes;
            entity.ApproveDate = ApproveDate;
            entity.Cancelled = Cancelled;
            entity.CancelDate = CancelDate;
            entity.CancelNotes = CancelNotes;
            entity.IsApproved = IsApproved;
            entity.CustomerPoNr = CustomerPoNr;
    
            Converting(entity);
    
            return entity;
        }
    
        partial void Converting(PurchaseOrder entity);
      
        public int Id { get; set; }
        public string PoNr { get; set; }
        public int CustomerId { get; set; }
        public int ProductId { get; set; }
        public int SizingStandardId { get; set; }
        public System.DateTime OrderDate { get; set; }
        public Nullable<System.DateTime> DueDate { get; set; }
        public string Description { get; set; }
        public int Quantity { get; set; }
        public decimal UnitPrice { get; set; }
        public Nullable<decimal> BuyingPrice { get; set; }
        public Nullable<decimal> RetailPrice { get; set; }
        public int SizeRatioDivisor { get; set; }
        public string Notes { get; set; }
        public Nullable<System.DateTime> ApproveDate { get; set; }
        public bool Cancelled { get; set; }
        public Nullable<System.DateTime> CancelDate { get; set; }
        public string CancelNotes { get; set; }
        public bool IsApproved { get; set; }
        public string CustomerPoNr { get; set; }
    }
}
